<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">
	
  <!--  
    This adds full text search capabilities to the network entities and contacts to support the simple search required by the console.
    It is intended to offer simple search in the DB alone, in addition to any complex faceting that might be handled
    by SOLR.  At the time of adding, only Datasets are indexed by SOLR, but we have a need to find other entities 
    in a simple manner.  SOLR and all the extra parts (SOLRAnnotated objects, event handling etc) seemed overkill
    for something the database can do very simply. 
  -->
  <changeSet id="4" author="tim">
    <!--  
      NODE
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE node ADD COLUMN fulltext_search tsvector;
      CREATE INDEX node_fulltext_search_idx ON node USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION node_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.participation_status AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.gbif_region AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.continent AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.country AS TEXT),''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER node_fulltext_update 
        BEFORE INSERT OR UPDATE ON node 
        FOR EACH ROW EXECUTE PROCEDURE node_change_trigger(); 
	  UPDATE node SET fulltext_search = NULL;  	
      ]]>      
    </sql>
    
    <!--  
      DATASET
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE dataset ADD COLUMN fulltext_search tsvector;
      CREATE INDEX dataset_fulltext_search_idx ON dataset USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION dataset_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.sub_type AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.alias,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.abbreviation,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.citation,''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER dataset_fulltext_update 
        BEFORE INSERT OR UPDATE ON dataset 
        FOR EACH ROW EXECUTE PROCEDURE dataset_change_trigger(); 
	  UPDATE dataset SET fulltext_search = NULL;  	
      ]]>      
    </sql>  

    
    <!--  
      INSTALLATION
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE installation ADD COLUMN fulltext_search tsvector;
      CREATE INDEX installation_fulltext_search_idx ON installation USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION installation_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(CAST(NEW.type AS TEXT),'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER installation_fulltext_update 
        BEFORE INSERT OR UPDATE ON installation 
        FOR EACH ROW EXECUTE PROCEDURE installation_change_trigger(); 
	  UPDATE installation SET fulltext_search = NULL;  	
      ]]>      
    </sql>  
    
    
    <!--  
      ORGANIZATION
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE organization ADD COLUMN fulltext_search tsvector;
      CREATE INDEX organization_fulltext_search_idx ON organization USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION organization_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.abbreviation,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.language,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.logo_url,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER organization_fulltext_update 
        BEFORE INSERT OR UPDATE ON organization 
        FOR EACH ROW EXECUTE PROCEDURE organization_change_trigger(); 
	  UPDATE organization SET fulltext_search = NULL;  	
      ]]>      
    </sql>  
        
    <!--  
      NETWORK
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE network ADD COLUMN fulltext_search tsvector;
      CREATE INDEX network_fulltext_search_idx ON network USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION network_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.title,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.language,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.homepage,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.logo_url,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER network_fulltext_update 
        BEFORE INSERT OR UPDATE ON network 
        FOR EACH ROW EXECUTE PROCEDURE network_change_trigger(); 
	  UPDATE network SET fulltext_search = NULL;  	
      ]]>      
    </sql>      
    
    <!--  
      CONTACT
      - Adds a new fulltext column
      - Automates its value with a trigger
      - Executes the trigger on existing content
    -->
    <sql splitStatements="false" stripComments="false">
      <![CDATA[
      ALTER TABLE contact ADD COLUMN fulltext_search tsvector;
      CREATE INDEX contact_fulltext_search_idx ON contact USING gin(fulltext_search);

      CREATE OR REPLACE FUNCTION contact_change_trigger()
        RETURNS trigger AS
        $func$
          BEGIN
            NEW.fulltext_search := 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.name,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.description,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.position,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.email,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.phone,'')) || 
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.organization,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.address,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.city,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.province,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.country,'')) ||
              TO_TSVECTOR('pg_catalog.english', COALESCE(NEW.postal_code,''));
            RETURN NEW;
          END
        $func$ LANGUAGE plpgsql;  
      
      CREATE TRIGGER contact_fulltext_update 
        BEFORE INSERT OR UPDATE ON contact 
        FOR EACH ROW EXECUTE PROCEDURE contact_change_trigger(); 
      UPDATE contact SET fulltext_search = NULL;  	
      ]]>      
    </sql>  
    
  </changeSet>  
</databaseChangeLog>