<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

<changeSet id="162" author="rns886" runInTransaction="false" ignore="true">
    <sql splitStatements="false" stripComments="true">
      <![CDATA[
        -- Migration script to populate collection_facet_links table with existing collection data
        -- This script handles CollectionContentType and PreservationType vocabularies

        DO $$
        DECLARE
          collection_record RECORD;
          content_type_value TEXT;
          preservation_type_value TEXT;
          accession_status_value TEXT;
          found_facet_id INTEGER;
          total_collections INTEGER := 0;
          processed_collections INTEGER := 0;
          content_type_links INTEGER := 0;
          preservation_type_links INTEGER := 0;
          accession_status_links INTEGER := 0;
          start_time TIMESTAMP := clock_timestamp();
        BEGIN
          -- Get total count for progress reporting
          SELECT COUNT(*) INTO total_collections FROM collection WHERE deleted IS NULL;

          RAISE NOTICE 'Starting collection facet migration for % collections at %', total_collections, start_time;

          -- Process each collection
          FOR collection_record IN
            SELECT key, content_type, preservation_type, accession_status
            FROM collection
            WHERE deleted IS NULL
          LOOP
            processed_collections := processed_collections + 1;

            -- Process content types (array field)
            IF collection_record.content_type IS NOT NULL THEN
              -- Use FOREACH to iterate over array elements
              FOREACH content_type_value IN ARRAY collection_record.content_type
              LOOP
                -- Skip null or empty values
                IF content_type_value IS NULL OR trim(content_type_value) = '' THEN
                  CONTINUE;
                END IF;

                -- Convert format from potential UPPER_CASE_WITH_UNDERSCORES to CamelCase
                -- Handle common patterns in collection content types
                content_type_value := CASE
                  -- Biological content types
                  WHEN content_type_value = 'BIOLOGICAL_OTHER' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_PRESERVED_ORGANISMS' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_LIVING_ORGANISMS' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_ANIMAL_DERIVED' THEN 'AnimalDerived'
                  WHEN content_type_value = 'BIOLOGICAL_LIVING_CELL_OR_TISSUE_CULTURES' THEN 'CellsTissue'
                  WHEN content_type_value = 'BIOLOGICAL_MOLECULAR_DERIVATES' THEN 'MolecularDerivatives'
                  WHEN content_type_value = 'BIOLOGICAL_PLANT_DERIVED' THEN 'PlantDerived'
                  WHEN content_type_value = 'BIOLOGICAL_EXOSKELETONS' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_ENDOSKELETONS' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_WHOLE_ORGANISMS' THEN 'Biological'
                  WHEN content_type_value = 'BIOLOGICAL_TISSUE_SAMPLES' THEN 'CellsTissue'
                  WHEN content_type_value = 'BIOLOGICAL_GENETIC_MATERIAL' THEN 'GeneticMaterial'
                  -- Paleontological content types
                  WHEN content_type_value = 'PALEONTOLOGICAL_INVERTEBRATE_FOSSILS' THEN 'InvertebrateFossils'
                  WHEN content_type_value = 'PALEONTOLOGICAL_VERTEBRATE_FOSSILS' THEN 'VertebrateFossils'
                  WHEN content_type_value = 'PALEONTOLOGICAL_PLANT_FOSSILS' THEN 'PlantFossils'
                  WHEN content_type_value = 'PALEONTOLOGICAL_TRACE_FOSSILS' THEN 'TraceFossils'
                  WHEN content_type_value = 'PALEONTOLOGICAL_MICROFOSSILS' THEN 'Microfossils'
                  WHEN content_type_value = 'PALEONTOLOGICAL_OTHER' THEN 'PaleontologicalOther'
                  -- Archaeological content types
                  WHEN content_type_value = 'ARCHAEOLOGICAL' THEN 'Archaeological'
                  WHEN content_type_value = 'ARCHAEOLOGICAL_ARTIFACTS' THEN 'Archaeological'
                  WHEN content_type_value = 'ARCHAEOLOGICAL_HUMAN_REMAINS' THEN 'HumanRemains'
                  -- Earth/Planetary/Minerals
                  WHEN content_type_value = 'EARTH_PLANETARY_MINERALS' THEN 'EarthPlanetaryMinerals'
                  WHEN content_type_value = 'EARTH_PLANETARY_ROCKS' THEN 'Rocks'
                  WHEN content_type_value = 'EARTH_PLANETARY_METEORITES' THEN 'Meteorites'
                  WHEN content_type_value = 'EARTH_PLANETARY_SEDIMENTS' THEN 'Sediments'
                  WHEN content_type_value = 'EARTH_PLANETARY_SOILS' THEN 'Soils'
                  -- Anthropological
                  WHEN content_type_value = 'ANTHROPOLOGICAL' THEN 'Anthropological'
                  WHEN content_type_value = 'ANTHROPOLOGICAL_ARTIFACTS' THEN 'Anthropological'
                  WHEN content_type_value = 'ANTHROPOLOGICAL_HUMAN_REMAINS' THEN 'HumanRemains'
                  -- Other types
                  WHEN content_type_value = 'ATMOSPHERIC' THEN 'Atmospheric'
                  WHEN content_type_value = 'SPACE' THEN 'Space'
                  WHEN content_type_value = 'HISTORICAL' THEN 'Historical'
                  WHEN content_type_value = 'APPLIED_ARTS' THEN 'AppliedArts'
                  WHEN content_type_value = 'FINE_ARTS' THEN 'FineArts'
                  WHEN content_type_value = 'DECORATIVE_ARTS' THEN 'DecorativeArts'
                  WHEN content_type_value = 'MIXED_COLLECTIONS' THEN 'MixedCollections'
                  WHEN content_type_value = 'OTHER' THEN 'Other'
                  -- Direct mappings for already correct format
                  WHEN content_type_value = 'Biological' THEN 'Biological'
                  WHEN content_type_value = 'Archaeological' THEN 'Archaeological'
                  WHEN content_type_value = 'AnimalDerived' THEN 'AnimalDerived'
                  WHEN content_type_value = 'PlantDerived' THEN 'PlantDerived'
                  ELSE content_type_value -- Keep as-is if no mapping found
                END;

                -- Find facet ID for CollectionContentType
                SELECT id INTO found_facet_id
                FROM grscicoll_vocab_concept
                WHERE vocabulary_name = 'CollectionContentType'
                AND name = content_type_value;

                IF found_facet_id IS NOT NULL THEN
                  -- Insert facet link (ON CONFLICT DO NOTHING handles duplicates)
                  INSERT INTO collection_concept_links (collection_key, concept_id)
                  VALUES (collection_record.key, found_facet_id)
                  ON CONFLICT (collection_key, concept_id) DO NOTHING;

                  content_type_links := content_type_links + 1;
                ELSE
                  RAISE NOTICE 'No facet found for CollectionContentType: % (collection: %)', content_type_value, collection_record.key;
                END IF;
              END LOOP;
            END IF;

            -- Process preservation types (array field)
            IF collection_record.preservation_type IS NOT NULL THEN
              -- Use FOREACH to iterate over array elements
              FOREACH preservation_type_value IN ARRAY collection_record.preservation_type
              LOOP
                -- Skip null or empty values
                IF preservation_type_value IS NULL OR trim(preservation_type_value) = '' THEN
                  CONTINUE;
                END IF;

                -- Convert format from potential UPPER_CASE_WITH_UNDERSCORES to CamelCase
                -- Handle common patterns in preservation types
                preservation_type_value := CASE
                  WHEN preservation_type_value = 'SAMPLE_DRIED' THEN 'SampleDried'
                  WHEN preservation_type_value = 'SAMPLE_CRYOPRESERVED' THEN 'SampleCryopreserved'
                  WHEN preservation_type_value = 'SAMPLE_FLUID_PRESERVED' THEN 'SampleFluidPreserved'
                  WHEN preservation_type_value = 'SAMPLE_PINNED' THEN 'SamplePinned'
                  WHEN preservation_type_value = 'SAMPLE_PRESSED' THEN 'SamplePressed'
                  WHEN preservation_type_value = 'SAMPLE_REFRIGERATED' THEN 'SampleRefrigerated'
                  WHEN preservation_type_value = 'SAMPLE_FROZEN' THEN 'SampleFrozen'
                  WHEN preservation_type_value = 'SAMPLE_FREEZE_DRIED' THEN 'SampleFreezeDried'
                  WHEN preservation_type_value = 'SAMPLE_EMBEDDED' THEN 'SampleEmbedded'
                  WHEN preservation_type_value = 'SAMPLE_ENCAPSULATED' THEN 'SampleEncapsulated'
                  WHEN preservation_type_value = 'SAMPLE_MOUNTED' THEN 'SampleMounted'
                  WHEN preservation_type_value = 'SAMPLE_OTHER' THEN 'SampleOther'
                  WHEN preservation_type_value = 'STORAGE_CONTROLLED_ATMOSPHERE' THEN 'StorageControlledAtmosphere'
                  WHEN preservation_type_value = 'STORAGE_FROZEN_BETWEEN_MINUS_132_AND_MINUS_196' THEN 'StorageFrozenBetweenMinus132AndMinus196'
                  WHEN preservation_type_value = 'STORAGE_FROZEN_AT_MINUS_80' THEN 'StorageFrozenAtMinus80'
                  WHEN preservation_type_value = 'STORAGE_FROZEN_AT_MINUS_20' THEN 'StorageFrozenAtMinus20'
                  WHEN preservation_type_value = 'STORAGE_REFRIGERATED' THEN 'StorageRefrigerated'
                  WHEN preservation_type_value = 'STORAGE_RECORDED' THEN 'StorageRecorded'
                  WHEN preservation_type_value = 'STORAGE_OTHER' THEN 'StorageOther'
                  WHEN preservation_type_value = 'STORAGE_INDOORS' THEN 'StorageIndoors'
                  WHEN preservation_type_value = 'STORAGE_OUTDOORS' THEN 'StorageOutdoors'
                  ELSE preservation_type_value -- Keep as-is if already in correct format
                END;

                -- Find facet ID for PreservationType
                SELECT id INTO found_facet_id
                FROM grscicoll_vocab_concept
                WHERE vocabulary_name = 'PreservationType'
                AND name = preservation_type_value;

                IF found_facet_id IS NOT NULL THEN
                  -- Insert facet link (ON CONFLICT DO NOTHING handles duplicates)
                  INSERT INTO collection_concept_links (collection_key, concept_id)
                  VALUES (collection_record.key, found_facet_id)
                  ON CONFLICT (collection_key, concept_id) DO NOTHING;

                  preservation_type_links := preservation_type_links + 1;
                ELSE
                  RAISE NOTICE 'No facet found for PreservationType: % (collection: %)', preservation_type_value, collection_record.key;
                END IF;
              END LOOP;
            END IF;

            -- Process accession status (single value field)
            IF collection_record.accession_status IS NOT NULL AND trim(collection_record.accession_status) != '' THEN
              accession_status_value := collection_record.accession_status;

              -- Normalize accession status value to CamelCase
              accession_status_value := CASE
                WHEN accession_status_value = 'INSTITUTIONAL' THEN 'Institutional'
                WHEN accession_status_value = 'PROJECT' THEN 'Project'
                WHEN accession_status_value = 'PRIVATE' THEN 'Private'
                WHEN accession_status_value = 'UNKNOWN' THEN 'Unknown'
                ELSE accession_status_value -- Keep as-is if already in correct format
              END;

              -- Find facet ID for AccessionStatus
              SELECT id INTO found_facet_id
              FROM grscicoll_vocab_concept
              WHERE vocabulary_name = 'AccessionStatus'
              AND name = accession_status_value;

              IF found_facet_id IS NOT NULL THEN
                -- Insert facet link (ON CONFLICT DO NOTHING handles duplicates)
                INSERT INTO collection_concept_links (collection_key, concept_id)
                VALUES (collection_record.key, found_facet_id)
                ON CONFLICT (collection_key, concept_id) DO NOTHING;

                accession_status_links := accession_status_links + 1;
              ELSE
                RAISE NOTICE 'No facet found for AccessionStatus: % (collection: %)', accession_status_value, collection_record.key;
              END IF;
            END IF;

            -- Progress reporting every 1000 collections
            IF processed_collections % 1000 = 0 THEN
              RAISE NOTICE 'Processed % of % collections (%.1f%%) - Content type links: %, Preservation type links: %, Accession status links: %',
                processed_collections, total_collections,
                (processed_collections::FLOAT / total_collections * 100),
                content_type_links, preservation_type_links, accession_status_links;
            END IF;
          END LOOP;

          RAISE NOTICE 'Collection facet migration completed in % seconds',
            EXTRACT(EPOCH FROM (clock_timestamp() - start_time));
          RAISE NOTICE 'Final stats: % collections processed, % content type links created, % preservation type links created, % accession status links created',
            processed_collections, content_type_links, preservation_type_links, accession_status_links;

        EXCEPTION
          WHEN OTHERS THEN
            RAISE NOTICE 'Error during collection facet migration: %', SQLERRM;
            RAISE;
        END $$;

        -- Verify the migration results
        SELECT
            'CollectionContentType' as vocabulary,
            COUNT(*) as concept_links_created
        FROM collection_concept_links ccl
        JOIN grscicoll_vocab_concept c ON ccl.concept_id = c.id
        WHERE c.vocabulary_name = 'CollectionContentType'

        UNION ALL

        SELECT
            'PreservationType' as vocabulary,
            COUNT(*) as concept_links_created
        FROM collection_concept_links ccl
        JOIN grscicoll_vocab_concept c ON ccl.concept_id = c.id
        WHERE c.vocabulary_name = 'PreservationType'

        UNION ALL

        SELECT
            'AccessionStatus' as vocabulary,
            COUNT(*) as concept_links_created
        FROM collection_concept_links ccl
        JOIN grscicoll_vocab_concept c ON ccl.concept_id = c.id
        WHERE c.vocabulary_name = 'AccessionStatus';
      ]]>
    </sql>
  </changeSet>
</databaseChangeLog>
