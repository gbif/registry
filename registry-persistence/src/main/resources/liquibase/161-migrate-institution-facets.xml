<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

  <changeSet id="161" author="auzun">
    <sql splitStatements="false" stripComments="true">
      <![CDATA[
        -- Migration script to populate institution_facet_links from existing institution data
        -- This migrates disciplines and types from array columns to the hierarchical facet system

        DO $$
        DECLARE
            inst_record RECORD;
            discipline_value TEXT;
            type_value TEXT;
            normalized_value TEXT;
            found_facet_id INTEGER;
            migrated_disciplines INTEGER := 0;
            migrated_types INTEGER := 0;
            missing_disciplines INTEGER := 0;
            missing_types INTEGER := 0;
        BEGIN
            RAISE NOTICE 'Starting migration of institution facets...';
            
            -- Function to convert UPPER_CASE_WITH_UNDERSCORES to CamelCase
            CREATE OR REPLACE FUNCTION normalize_vocabulary_value(input_value TEXT) 
            RETURNS TEXT AS $func$
            DECLARE
                parts TEXT[];
                result TEXT := '';
                part TEXT;
            BEGIN
                -- Handle null or empty input
                IF input_value IS NULL OR input_value = '' THEN
                    RETURN NULL;
                END IF;
                
                -- Split by underscores and convert each part
                parts := string_to_array(lower(input_value), '_');
                
                FOREACH part IN ARRAY parts
                LOOP
                    IF part != '' THEN
                        -- Capitalize first letter of each part
                        result := result || upper(left(part, 1)) || substring(part, 2);
                    END IF;
                END LOOP;
                
                RETURN result;
            END;
            $func$ LANGUAGE plpgsql;
            
            -- Migrate disciplines
            RAISE NOTICE 'Migrating disciplines...';
            FOR inst_record IN 
                SELECT key, discipline 
                FROM institution 
                WHERE deleted IS NULL 
                AND discipline IS NOT NULL 
                AND array_length(discipline, 1) > 0
            LOOP
                -- Process each discipline value for this institution
                FOREACH discipline_value IN ARRAY inst_record.discipline
                LOOP
                    -- Skip null or empty values
                    IF discipline_value IS NULL OR discipline_value = '' THEN
                        CONTINUE;
                    END IF;
                    
                    -- Normalize the value to CamelCase
                    normalized_value := normalize_vocabulary_value(discipline_value);
                    
                    -- Find the facet ID for this discipline (try both original and normalized)
                    SELECT id INTO found_facet_id 
                    FROM grscicoll_vocab_facet 
                    WHERE vocabulary_name = 'Discipline' 
                    AND (name = discipline_value OR name = normalized_value);
                    
                    IF found_facet_id IS NOT NULL THEN
                        -- Insert the facet link (ON CONFLICT DO NOTHING handles duplicates)
                        INSERT INTO institution_facet_links (institution_key, facet_id)
                        VALUES (inst_record.key, found_facet_id)
                        ON CONFLICT (institution_key, facet_id) DO NOTHING;
                        
                        migrated_disciplines := migrated_disciplines + 1;
                        
                        IF migrated_disciplines % 100 = 0 THEN
                            RAISE NOTICE 'Migrated % discipline links...', migrated_disciplines;
                        END IF;
                    ELSE
                        RAISE WARNING 'Discipline facet not found: % (normalized: %) for institution %', 
                                     discipline_value, normalized_value, inst_record.key;
                        missing_disciplines := missing_disciplines + 1;
                    END IF;
                END LOOP;
            END LOOP;
            
            -- Migrate types
            RAISE NOTICE 'Migrating types...';
            FOR inst_record IN 
                SELECT key, type 
                FROM institution 
                WHERE deleted IS NULL 
                AND type IS NOT NULL 
                AND array_length(type, 1) > 0
            LOOP
                -- Process each type value for this institution
                FOREACH type_value IN ARRAY inst_record.type
                LOOP
                    -- Skip null or empty values
                    IF type_value IS NULL OR type_value = '' THEN
                        CONTINUE;
                    END IF;
                    
                    -- Normalize the value to CamelCase
                    normalized_value := normalize_vocabulary_value(type_value);
                    
                    -- Find the facet ID for this type (try both original and normalized)
                    SELECT id INTO found_facet_id 
                    FROM grscicoll_vocab_facet 
                    WHERE vocabulary_name = 'InstitutionType' 
                    AND (name = type_value OR name = normalized_value);
                    
                    IF found_facet_id IS NOT NULL THEN
                        -- Insert the facet link (ON CONFLICT DO NOTHING handles duplicates)
                        INSERT INTO institution_facet_links (institution_key, facet_id)
                        VALUES (inst_record.key, found_facet_id)
                        ON CONFLICT (institution_key, facet_id) DO NOTHING;
                        
                        migrated_types := migrated_types + 1;
                        
                        IF migrated_types % 100 = 0 THEN
                            RAISE NOTICE 'Migrated % type links...', migrated_types;
                        END IF;
                    ELSE
                        RAISE WARNING 'InstitutionType facet not found: % (normalized: %) for institution %', 
                                     type_value, normalized_value, inst_record.key;
                        missing_types := missing_types + 1;
                    END IF;
                END LOOP;
            END LOOP;
            
            -- Clean up the temporary function
            DROP FUNCTION normalize_vocabulary_value(TEXT);
            
            -- Summary
            RAISE NOTICE '=== MIGRATION SUMMARY ===';
            RAISE NOTICE 'Successfully migrated % discipline links', migrated_disciplines;
            RAISE NOTICE 'Successfully migrated % type links', migrated_types;
            RAISE NOTICE 'Missing discipline facets: %', missing_disciplines;
            RAISE NOTICE 'Missing type facets: %', missing_types;
            RAISE NOTICE 'Migration completed!';
            
        END $$;
        
        -- Verify the migration
        SELECT 
            'Discipline' as vocabulary,
            COUNT(*) as facet_links_created
        FROM institution_facet_links ifl
        JOIN grscicoll_vocab_facet f ON ifl.facet_id = f.id
        WHERE f.vocabulary_name = 'Discipline'
        
        UNION ALL
        
        SELECT 
            'InstitutionType' as vocabulary,
            COUNT(*) as facet_links_created
        FROM institution_facet_links ifl
        JOIN grscicoll_vocab_facet f ON ifl.facet_id = f.id
        WHERE f.vocabulary_name = 'InstitutionType';
      ]]>
    </sql>
  </changeSet>
</databaseChangeLog> 