<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">


<changeSet id="161" author="auzun" runInTransaction="false" ignore="true">
    <sql splitStatements="false" stripComments="true">
      <![CDATA[
        -- Migration script to populate institution_concept_links from existing institution data
        -- This migrates disciplines and types from array columns to the hierarchical concept system

        DO $$
        DECLARE
            inst_record RECORD;
            discipline_value TEXT;
            type_value TEXT;
            institutional_governance_value TEXT;
            normalized_value TEXT;
            found_concept_id INTEGER;
            migrated_disciplines INTEGER := 0;
            migrated_types INTEGER := 0;
            migrated_institutional_governances INTEGER := 0;
            missing_disciplines INTEGER := 0;
            missing_types INTEGER := 0;
            missing_institutional_governances INTEGER := 0;
        BEGIN
            RAISE NOTICE 'Starting migration of institution concepts...';

            -- Function to convert UPPER_CASE_WITH_UNDERSCORES to CamelCase
            CREATE OR REPLACE FUNCTION normalize_vocabulary_value(input_value TEXT)
            RETURNS TEXT AS $func$
            DECLARE
                parts TEXT[];
                result TEXT := '';
                part TEXT;
            BEGIN
                -- Handle null or empty input
                IF input_value IS NULL OR input_value = '' THEN
                    RETURN NULL;
                END IF;

                -- Split by underscores and convert each part
                parts := string_to_array(lower(input_value), '_');

                FOREACH part IN ARRAY parts
                LOOP
                    IF part != '' THEN
                        -- Capitalize first letter of each part
                        result := result || upper(left(part, 1)) || substring(part, 2);
                    END IF;
                END LOOP;

                RETURN result;
            END;
            $func$ LANGUAGE plpgsql;

            -- Migrate disciplines
            RAISE NOTICE 'Migrating disciplines...';
            FOR inst_record IN
                SELECT key, discipline
                FROM institution
                WHERE deleted IS NULL
                AND discipline IS NOT NULL
                AND array_length(discipline, 1) > 0
            LOOP
                -- Process each discipline value for this institution
                FOREACH discipline_value IN ARRAY inst_record.discipline
                LOOP
                    -- Skip null or empty values
                    IF discipline_value IS NULL OR discipline_value = '' THEN
                        CONTINUE;
                    END IF;

                    -- Normalize the value to CamelCase
                    normalized_value := normalize_vocabulary_value(discipline_value);

                    -- Find the concept ID for this discipline (try both original and normalized)
                    SELECT id INTO found_concept_id
                    FROM grscicoll_vocab_concept
                    WHERE vocabulary_name = 'Discipline'
                    AND (name = discipline_value OR name = normalized_value);

                    IF found_concept_id IS NOT NULL THEN
                        -- Insert the concept link (ON CONFLICT DO NOTHING handles duplicates)
                        INSERT INTO institution_concept_links (institution_key, concept_id)
                        VALUES (inst_record.key, found_concept_id)
                        ON CONFLICT (institution_key, concept_id) DO NOTHING;

                        migrated_disciplines := migrated_disciplines + 1;

                        IF migrated_disciplines % 100 = 0 THEN
                            RAISE NOTICE 'Migrated % discipline links...', migrated_disciplines;
                        END IF;
                    ELSE
                        RAISE WARNING 'Discipline concept not found: % (normalized: %) for institution %',
                                     discipline_value, normalized_value, inst_record.key;
                        missing_disciplines := missing_disciplines + 1;
                    END IF;
                END LOOP;
            END LOOP;

            -- Migrate types
            RAISE NOTICE 'Migrating types...';
            FOR inst_record IN
                SELECT key, type
                FROM institution
                WHERE deleted IS NULL
                AND type IS NOT NULL
                AND array_length(type, 1) > 0
            LOOP
                -- Process each type value for this institution
                FOREACH type_value IN ARRAY inst_record.type
                LOOP
                    -- Skip null or empty values
                    IF type_value IS NULL OR type_value = '' THEN
                        CONTINUE;
                    END IF;

                    -- Normalize the value to CamelCase
                    normalized_value := normalize_vocabulary_value(type_value);

                    -- Find the concept ID for this type (try both original and normalized)
                    SELECT id INTO found_concept_id
                    FROM grscicoll_vocab_concept
                    WHERE vocabulary_name = 'InstitutionType'
                    AND (name = type_value OR name = normalized_value);

                    IF found_concept_id IS NOT NULL THEN
                        -- Insert the concept link (ON CONFLICT DO NOTHING handles duplicates)
                        INSERT INTO institution_concept_links (institution_key, concept_id)
                        VALUES (inst_record.key, found_concept_id)
                        ON CONFLICT (institution_key, concept_id) DO NOTHING;

                        migrated_types := migrated_types + 1;

                        IF migrated_types % 100 = 0 THEN
                            RAISE NOTICE 'Migrated % type links...', migrated_types;
                        END IF;
                    ELSE
                        RAISE WARNING 'InstitutionType concept not found: % (normalized: %) for institution %',
                                     type_value, normalized_value, inst_record.key;
                        missing_types := missing_types + 1;
                    END IF;
                END LOOP;
            END LOOP;

            -- Migrate institutional governances
            RAISE NOTICE 'Migrating institutional governances...';
            FOR inst_record IN
                SELECT key, institutional_governance
                FROM institution
                WHERE deleted IS NULL
                AND institutional_governance IS NOT NULL
                AND array_length(institutional_governance, 1) > 0
            LOOP
                -- Process each institutional governance value for this institution
                FOREACH institutional_governance_value IN ARRAY inst_record.institutional_governance
                LOOP
                    -- Skip null or empty values
                    IF institutional_governance_value IS NULL OR institutional_governance_value = '' THEN
                        CONTINUE;
                    END IF;

                    -- Normalize the value to CamelCase
                    normalized_value := normalize_vocabulary_value(institutional_governance_value);

                    -- Find the concept ID for this institutional governance (try both original and normalized)
                    SELECT id INTO found_concept_id
                    FROM grscicoll_vocab_concept
                    WHERE vocabulary_name = 'InstitutionalGovernance'
                    AND (name = institutional_governance_value OR name = normalized_value);

                    IF found_concept_id IS NOT NULL THEN
                        -- Insert the concept link (ON CONFLICT DO NOTHING handles duplicates)
                        INSERT INTO institution_concept_links (institution_key, concept_id)
                        VALUES (inst_record.key, found_concept_id)
                        ON CONFLICT (institution_key, concept_id) DO NOTHING;

                        migrated_institutional_governances := migrated_institutional_governances + 1;

                        IF migrated_institutional_governances % 100 = 0 THEN
                            RAISE NOTICE 'Migrated % institutional governance links...', migrated_institutional_governances;
                        END IF;
                    ELSE
                        RAISE WARNING 'InstitutionalGovernance concept not found: % (normalized: %) for institution %',
                                     institutional_governance_value, normalized_value, inst_record.key;
                        missing_institutional_governances := missing_institutional_governances + 1;
                    END IF;
                END LOOP;
            END LOOP;

            -- Clean up the temporary function
            DROP FUNCTION normalize_vocabulary_value(TEXT);

            -- Summary
            RAISE NOTICE '=== MIGRATION SUMMARY ===';
            RAISE NOTICE 'Successfully migrated % discipline links', migrated_disciplines;
            RAISE NOTICE 'Successfully migrated % type links', migrated_types;
            RAISE NOTICE 'Successfully migrated % institutional governance links', migrated_institutional_governances;
            RAISE NOTICE 'Missing discipline concepts: %', missing_disciplines;
            RAISE NOTICE 'Missing type concepts: %', missing_types;
            RAISE NOTICE 'Missing institutional governance concepts: %', missing_institutional_governances;
            RAISE NOTICE 'Migration completed!';

        END $$;

        -- Verify the migration
        SELECT
            'Discipline' as vocabulary,
            COUNT(*) as concept_links_created
        FROM institution_concept_links icl
        JOIN grscicoll_vocab_concept c ON icl.concept_id = c.id
        WHERE c.vocabulary_name = 'Discipline'

        UNION ALL

        SELECT
            'InstitutionType' as vocabulary,
            COUNT(*) as concept_links_created
        FROM institution_concept_links icl
        JOIN grscicoll_vocab_concept c ON icl.concept_id = c.id
        WHERE c.vocabulary_name = 'InstitutionType'

        UNION ALL

        SELECT
            'InstitutionalGovernance' as vocabulary,
            COUNT(*) as concept_links_created
        FROM institution_concept_links icl
        JOIN grscicoll_vocab_concept c ON icl.concept_id = c.id
        WHERE c.vocabulary_name = 'InstitutionalGovernance';
      ]]>
    </sql>
  </changeSet>
</databaseChangeLog>
