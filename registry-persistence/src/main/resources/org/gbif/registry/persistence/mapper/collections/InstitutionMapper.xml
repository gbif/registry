<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.InstitutionMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="INSTITUTION_MAP" type="Institution" autoMapping="true">
    <id property="key" column="key"/>
    <result property="email" column="email" typeHandler="StringArrayTypeHandler"/>
    <result property="phone" column="phone" typeHandler="StringArrayTypeHandler"/>
    <result property="disciplines" column="discipline" typeHandler="StringArrayTypeHandler"/>
    <result property="additionalNames" column="additional_names" typeHandler="StringArrayTypeHandler"/>
    <result property="alternativeCodes" column="alternative_codes" typeHandler="AlternativeCodesTypeHandler"/>
    <result property="types" column="type" typeHandler="StringArrayTypeHandler"/>
    <result property="institutionalGovernances" column="institutional_governance" typeHandler="StringArrayTypeHandler"/>
    <result property="catalogUrls" column="catalog_url" typeHandler="UriArrayTypeHandler"/>
    <result property="apiUrls" column="api_url" typeHandler="UriArrayTypeHandler"/>
    <association property="address" column="address_key" select="listAddress" />
    <association property="mailingAddress" column="mailing_address_key" select="listAddress" />
    <collection property="contactPersons" column="key" select="listContactPersons"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="comments" column="key" select="listComments"/>
    <collection property="occurrenceMappings" column="key" select="listOccurrenceMappings"/>
    <collection property="masterSourceMetadata" column="master_sync_metadata_key" select="getMasterSourceMetadata"/>
  </resultMap>

  <resultMap id="INSTITUTION_MATCHED_DTO_MAP" type="InstitutionMatchedDto" autoMapping="true">
    <id property="key" column="key"/>
    <result property="alternativeCodes" column="alternative_codes" typeHandler="org.gbif.mybatis.type.StringArrayTypeHandler"/>
  </resultMap>

  <resultMap id="INSTITUTION_GEOJSON_DTO_MAP" type="InstitutionGeoJsonDto" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <sql id="INSTITUTION_WRITE_FIELDS">
    key, code, name, description, type, active, email, phone, homepage, catalog_url, api_url, institutional_governance,
    discipline, latitude, longitude, mailing_address_key, address_key, additional_names, founding_date, number_specimens,
    logo_url, created_by, modified_by, created, modified, alternative_codes, master_source, display_on_NHCPortal,
    featured_image_url, featured_image_license, featured_image_attribution
  </sql>

  <sql id="INSTITUTION_READ_FIELDS">
    i.key, i.code, i.name, i.description, i.type, i.active, i.email, i.phone, i.homepage, i.catalog_url, i.api_url,
    i.institutional_governance, i.discipline, i.latitude, i.longitude, i.mailing_address_key, i.address_key,
    i.additional_names, i.founding_date, i.number_specimens, i.logo_url, i.created_by, i.modified_by,
    i.created, i.modified, i.deleted, i.alternative_codes, i.replaced_by, i.converted_to_collection, i.master_source,
    i.master_sync_metadata_key, i.display_on_NHCPortal, i.occurrence_count, i.type_specimen_count,
    i.featured_image_url, i.featured_image_license, i.featured_image_attribution
  </sql>

  <sql id="INSTITUTION_PARAMS_CREATE">
    #{key,jdbcType=OTHER},
    #{code,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{types,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{active,jdbcType=BOOLEAN},
    #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{homepage,jdbcType=VARCHAR},
    #{catalogUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{apiUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{institutionalGovernances,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{disciplines,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{latitude,jdbcType=NUMERIC},
    #{longitude,jdbcType=NUMERIC},
    #{mailingAddress.key,jdbcType=INTEGER},
    #{address.key,jdbcType=INTEGER},
    #{additionalNames,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{foundingDate,jdbcType=INTEGER},
    #{numberSpecimens,jdbcType=INTEGER},
    #{logoUrl,jdbcType=VARCHAR},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now(), <!-- modified -->
    #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore,
    #{masterSource,jdbcType=OTHER},
    #{displayOnNHCPortal,jdbcType=BOOLEAN},
    #{featuredImageUrl,jdbcType=VARCHAR},
    #{featuredImageLicense,jdbcType=OTHER},
    #{featuredImageAttribution,jdbcType=VARCHAR}
  </sql>

  <sql id="INSTITUTION_PARAMS_UPDATE">
    code = #{code,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    type = #{types,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    active = #{active,jdbcType=BOOLEAN},
    email = #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    phone = #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    homepage = #{homepage,jdbcType=VARCHAR},
    catalog_url = #{catalogUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    api_url = #{apiUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    institutional_governance = #{institutionalGovernances,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    discipline = #{disciplines,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    latitude = #{latitude,jdbcType=NUMERIC},
    longitude = #{longitude,jdbcType=NUMERIC},
    mailing_address_key = #{mailingAddress.key,jdbcType=INTEGER},
    address_key = #{address.key,jdbcType=INTEGER},
    additional_names = #{additionalNames,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    founding_date = #{foundingDate,jdbcType=INTEGER},
    number_specimens = #{numberSpecimens,jdbcType=INTEGER},
    logo_url = #{logoUrl,jdbcType=VARCHAR},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    deleted = null, <!-- if we're updating it can't be deleted -->
    alternative_codes = #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore,
    display_on_NHCPortal = #{displayOnNHCPortal,jdbcType=BOOLEAN},
    featured_image_url = #{featuredImageUrl,jdbcType=VARCHAR},
    featured_image_license = #{featuredImageLicense,jdbcType=OTHER},
    featured_image_attribution= #{featuredImageAttribution,jdbcType=VARCHAR}
    <!-- not allowed to change neither the masterSource nor the master source metadata in the update -->
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{params.query}))),'\s+',':*&amp;','g')||':*') AS query ON query @@ fulltext_search
    OR EXISTS(
      SELECT collection_contact_key
      FROM institution_collection_contact JOIN collection_contact cc ON cc.key = collection_contact_key
      WHERE institution_key = i.key AND query @@ cc.fulltext_search
    )
  </sql>

  <insert id="create" parameterType="Institution">
    INSERT INTO institution(<include refid="INSTITUTION_WRITE_FIELDS"/>)
    VALUES(<include refid="INSTITUTION_PARAMS_CREATE"/>)
  </insert>

  <update id="update" parameterType="Institution">
    UPDATE institution
    SET <include refid="INSTITUTION_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE institution
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="INSTITUTION_MAP">
    SELECT <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    WHERE i.key = #{key,jdbcType=OTHER}
  </select>

  <select id="exists" resultType="Boolean">
    SELECT count(1)
    FROM institution i
    WHERE i.key = #{key,jdbcType=OTHER}
  </select>

  <!-- new contacts model -->
  <select id="listContactPersons" resultMap="org.gbif.registry.persistence.mapper.collections.CollectionContactMapper.CONTACT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.CollectionContactMapper.CONTACT_READ_FIELDS"/>
    FROM collection_contact INNER JOIN institution_collection_contact ON collection_contact_key = key
    WHERE institution_key = #{key,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <insert id="addContactPerson">
    INSERT INTO institution_collection_contact(institution_key,collection_contact_key)
    VALUES(
    #{entityKey,jdbcType=OTHER},
    #{contactKey,jdbcType=INTEGER}
    )
  </insert>

  <delete id="removeContactPerson">
    DELETE FROM collection_contact USING institution_collection_contact
    WHERE
    collection_contact_key = collection_contact.key AND
    institution_key = #{entityKey,jdbcType=OTHER} AND
    collection_contact_key = #{contactKey,jdbcType=INTEGER}
  </delete>

  <delete id="removeAllContactPersons">
    DELETE FROM collection_contact USING institution_collection_contact
    WHERE
    collection_contact_key = collection_contact.key AND
    institution_key = #{entityKey,jdbcType=OTHER}
  </delete>

  <select id="listAddress" resultMap="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_READ_FIELDS"/>
    FROM address
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <select id="list" resultType="Institution"  resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT * FROM(
      SELECT DISTINCT ON (<if test="params.query != null" >ts_rank_cd(i.fulltext_search, query), </if>
                          <if test="params.fuzzyName != null" >similarity_score, </if>
                          i.created, i.key)
      <include refid="INSTITUTION_READ_FIELDS"/>, i.fulltext_search
    <if test="params.query != null" >,query</if>
      <if test="params.fuzzyName != null" >,similar_name_score(i.name, #{params.fuzzyName,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler}::text[]) AS similarity_score</if>
    FROM institution i
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <include refid="LIST_FILTER"/>
    ) AS i
    ORDER BY
    <include refid="org.gbif.registry.persistence.mapper.collections.Common.sortBy">
      <property name="alias" value="i."/>
    </include>
    <if test="params.query != null" >ts_rank_cd(i.fulltext_search, query) DESC, </if>
             <if test="params.fuzzyName != null" >similarity_score DESC, </if>
             i.created DESC, i.key
    <if test="params.page != null" >
      LIMIT #{params.page.limit} OFFSET #{params.page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM institution i
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <include refid="LIST_FILTER"/>
  </select>

  <!-- returns only the fields needed for geojson -->
  <select id="listGeoJson" resultType="InstitutionGeoJsonDto"  resultMap="INSTITUTION_GEOJSON_DTO_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (<if test="params.query != null" >ts_rank_cd(i.fulltext_search, query), </if>
    <if test="params.fuzzyName != null" >similarity_score, </if> i.key)
    i.key, i.name, i.latitude, i.longitude
    <if test="params.fuzzyName != null" >,similar_name_score(i.name, #{params.fuzzyName,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler}::text[]) AS similarity_score</if>
    FROM institution i
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <include refid="LIST_FILTER"/>
    AND i.latitude IS NOT NULL AND i.longitude IS NOT NULL
    ORDER BY <if test="params.query != null" >ts_rank_cd(i.fulltext_search, query) DESC, </if>
    <if test="params.fuzzyName != null" >similarity_score DESC, </if>
    i.key
    <if test="params.page != null" >
      LIMIT #{params.page.limit} OFFSET #{params.page.offset}
    </if>
  </select>

  <sql id="LIST_FILTER">
    <if test="params.machineTagNamespace != null || params.machineTagName != null || params.machineTagValue != null" >
      INNER JOIN institution_machine_tag imt on imt.institution_key = i.key
      INNER JOIN machine_tag mt on mt.key = imt.machine_tag_key
    </if>
    <if test="params.identifierType != null || params.identifier != null" >
      INNER JOIN institution_identifier ii on ii.institution_key = i.key
      INNER JOIN identifier id on id.key = ii.identifier_key
    </if>
    LEFT JOIN address addr ON addr.key = i.address_key
    LEFT JOIN address mail_addr ON mail_addr.key = i.mailing_address_key
    <if test="params.source != null || params.sourceId != null">
      INNER JOIN master_sync_metadata m ON i.master_sync_metadata_key = m.key
    </if>
    <if test="params.contactUserId != null || params.contactEmail != null">
      INNER JOIN institution_collection_contact icc ON icc.institution_key = i.key
      INNER JOIN collection_contact cc ON cc.key = icc.collection_contact_key
    </if>
    <where>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.COMMON_LIST_FILTER">
        <property name="alias" value="i."/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_ARRAY_FIELD_FILTER_CASE_INSENSITIVE">
        <property name="values" value="params.types"/>
        <property name="field" value="i.type"/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_ARRAY_FIELD_FILTER_CASE_INSENSITIVE">
        <property name="values" value="params.institutionalGovernances"/>
        <property name="field" value="i.institutional_governance"/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_ARRAY_FIELD_FILTER_CASE_INSENSITIVE">
        <property name="values" value="params.disciplines"/>
        <property name="field" value="i.discipline"/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_FILTER">
        <property name="values" value="params.institutionKeys"/>
        <property name="field" value="i.key"/>
      </include>
    </where>
  </sql>

  <select id="deleted" resultType="Institution"  resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    WHERE i.deleted IS NOT NULL
    <if test="replacedBy != null" >
      AND i.replaced_by = #{replacedBy,jdbcType=OTHER}
    </if>
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM institution
    WHERE deleted IS NOT NULL
    <if test="replacedBy != null" >
      AND replaced_by = #{replacedBy,jdbcType=OTHER}
    </if>
  </select>

  <update id="updateCounts">
    UPDATE institution
    SET occurrence_count = aux.occ_count,
        type_specimen_count = aux.ts_count
    FROM
      ( VALUES
      <foreach item="item" collection="counts" open="" separator="," close="">
        (#{item.key,jdbcType=OTHER}, #{item.occurrenceCount,jdbcType=INTEGER}, #{item.typeSpecimenCount,jdbcType=INTEGER})
      </foreach>
      ) AS aux (entity_key, occ_count, ts_count)
    WHERE key = aux.entity_key::uuid
  </update>

  <select id="getAllKeys" resultType="java.util.UUID">
    SELECT key FROM institution WHERE deleted IS NULL
  </select>

  <!-- LOOKUP -->
  <sql id="LOOKUP_MATCH_FIELDS">
    i.key, i.name, i.code, i.address_key, i.mailing_address_key, akeys(i.alternative_codes) AS alternative_codes, i.active
  </sql>

  <select id="lookup" resultMap="INSTITUTION_MATCHED_DTO_MAP">
    SELECT matches.*, addr.country addressCountry, mailing_addr.country mailingAddressCountry, id.identifier
    FROM (
    <trim prefixOverrides="UNION ALL">
    <if test="key != null" >
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      1 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      WHERE i.key = #{key,jdbcType=OTHER} AND i.deleted is null
    </if>
    <if test="identifier != null" >
    UNION ALL
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      0 AS key_match, 1 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      INNER JOIN institution_identifier ii ON ii.institution_key = i.key
      INNER JOIN identifier id ON ii.identifier_key = id."key" AND id.type != 'GRSCICOLL_ID'
      WHERE normalize_identifier(id.identifier) = normalize_identifier(#{identifier,jdbcType=VARCHAR}) AND i.deleted is null
    UNION ALL
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      0 AS key_match, 0 AS identifier_match, 1 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      WHERE normalize_name(i.name) = normalize_name(#{identifier,jdbcType=VARCHAR}) AND i.deleted is null
    </if>
    <if test="code != null" >
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 1 AS code_match, 0 AS alternative_code_match,
        0 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE i.code = #{code,jdbcType=VARCHAR} AND i.deleted is null
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 1 AS alternative_code_match,
        0 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE i.alternative_codes ?? #{code,jdbcType=VARCHAR} AND i.deleted is null
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
        1 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE normalize_name(i.name) = normalize_name(#{code,jdbcType=VARCHAR}) AND i.deleted is null
    </if>
      <if test="datasetKey != null">
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
        0 AS name_match_with_code, 1 AS explicit_mapping
        FROM institution i
        INNER JOIN institution_occurrence_mapping iom ON iom.institution_key = i.key
        INNER JOIN occurrence_mapping om ON om.key = iom.occurrence_mapping_key
        WHERE i.deleted is null AND om.dataset_key = #{datasetKey,jdbcType=OTHER}
        <if test="code != null"> AND (om.code IS NULL OR om.code = #{code,jdbcType=VARCHAR})</if>
        <if test="identifier != null"> AND (om.identifier IS NULL OR om.identifier = #{identifier,jdbcType=VARCHAR})</if>
      </if>
    </trim>) AS matches
    LEFT JOIN institution_identifier ii ON ii.institution_key = matches.key
    LEFT JOIN identifier id ON ii.identifier_key = id."key"
    LEFT JOIN address addr ON addr.key = matches.address_key
    LEFT JOIN address mailing_addr ON mailing_addr.key = matches.mailing_address_key
  </select>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO institution_tag(institution_key,tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{tagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN institution_tag ON tag_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING institution_tag
    WHERE
    tag_key = tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  <!-- END TAGS -->

  <!-- IDENTIFIERS -->
  <insert id="addCollectionIdentifier">
    INSERT INTO institution_identifier(institution_key,identifier_key,is_primary)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{identifierKey,jdbcType=INTEGER},
    #{isPrimary,jdbcType=BOOLEAN}
    )
  </insert>

  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.COLLECTION_IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN institution_identifier ON identifier_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING institution_identifier
    WHERE
    identifier_key = identifier.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <!-- we don't want to return deleted institutions in the identifier resolver -->
  <select id="findByIdentifier" resultType="java.util.UUID">
    SELECT inst.key
    FROM institution inst
    INNER JOIN institution_identifier ii ON ii.institution_key = inst.key
    INNER JOIN identifier i ON i."key" = ii.identifier_key
    WHERE regexp_replace(i.identifier, 'http://', '') = regexp_replace(#{identifier,jdbcType=VARCHAR}, 'http://', '')
      AND inst.deleted IS NULL;
  </select>

  <!-- Update existing primary identifier to false -->
  <update id="setAllIdentifiersToNonPrimary">
    UPDATE institution_identifier
    SET is_primary = false
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
  </update>

  <!-- Update identifier is_primary -->
  <update id="updateIdentifier">
    UPDATE institution_identifier
    SET is_primary = #{primary,jdbcType=BOOLEAN}
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=OTHER}
  </update>

  <select id="areRelated" resultType="boolean">
    SELECT EXISTS (
    SELECT 1
    FROM institution_identifier
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    AND identifier_key = #{identifierKey,jdbcType=INTEGER}
    )
  </select>
  <!-- END IDENTIFIERS -->

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO institution_machine_tag(institution_key,machine_tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN institution_machine_tag ON machine_tag_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING institution_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING institution_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (i.key) <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    INNER JOIN institution_machine_tag im ON im.institution_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY i.key, i.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM institution i
    INNER JOIN institution_machine_tag im ON im.institution_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>
  <!-- END MACHINE TAGS -->

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.collections.KeyCodeNameResult">
    <if test="q != null and !q.isEmpty()">
      SELECT key, code, name
      FROM (
        SELECT key, code, name,
        to_tsvector('english', code || ' ' || name) AS document,
        to_tsquery('english', unaccent(regexp_replace(#{q} || ':*', ' ', '&amp;', 'g'))) AS query
        FROM institution
        WHERE deleted IS NULL
      ) AS subquery
      WHERE document @@ query
      ORDER BY ts_rank(document, query) DESC
      LIMIT 20;
    </if>
    <if test="q == null or q.isEmpty()">
      SELECT key, code, name FROM institution
      WHERE deleted IS NULL
      LIMIT 20;
    </if>
  </select>

  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO institution_comment(institution_key,comment_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{commentKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listComments" resultType="org.gbif.api.model.registry.Comment">
    SELECT <include refid="org.gbif.registry.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment
    INNER JOIN institution_comment ON comment_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of comment to trigger cascade delete of the join table -->
  <delete id="deleteComment">
    DELETE FROM comment USING institution_comment
    WHERE
    comment_key = comment.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>
  <!-- END COMMENTS -->

  <!-- OCCURRENCE MAPPINGS -->
  <insert id="addOccurrenceMapping">
    INSERT INTO institution_occurrence_mapping(institution_key, occurrence_mapping_key)
    VALUES(
      #{targetEntityKey,jdbcType=OTHER},
      #{occurrenceMappingKey,jdbcType=INTEGER}
    )
  </insert>

  <update id="updateOccurrenceMappingEntity">
    UPDATE occurrence_mapping
    SET
    WHERE
    occurrence_mapping_key = occurrence_mapping.key
    AND institution_key = #{targetEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <update id="deleteOccurrenceMapping">
    DELETE FROM occurrence_mapping USING institution_occurrence_mapping
    WHERE
    occurrence_mapping_key = occurrence_mapping.key
    AND institution_key = #{targetEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <select id="listOccurrenceMappings" resultType="org.gbif.api.model.collections.OccurrenceMapping">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.OccurrenceMappingMapper.OCCURRENCE_MAPPING_FIELDS"/>
    FROM occurrence_mapping
    INNER JOIN institution_occurrence_mapping  iom ON iom.occurrence_mapping_key = key
    WHERE iom.institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>
  <!-- END EXPLICIT MAPPINGS -->

  <!-- MERGE -->
  <update id="replace">
    UPDATE institution
    SET deleted = now(),
        replaced_by = #{replacementKey,jdbcType=OTHER},
        modified_by = #{user,jdbcType=VARCHAR}
    WHERE key = #{targetEntityKey,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <update id="convertToCollection">
    UPDATE institution
    SET deleted = now(),
        converted_to_collection = #{collectionKey,jdbcType=OTHER}
    WHERE key = #{institutionKey,jdbcType=OTHER} AND deleted IS NULL
  </update>
  <!-- END MERGE -->

  <!-- MASTER SOURCE -->
  <insert id="addMasterSourceMetadata">
    UPDATE institution
    SET master_sync_metadata_key = #{metadataKey,jdbcType=INTEGER},
        master_source = #{masterSourceType,jdbcType=OTHER}
    WHERE key = #{targetEntityKey,jdbcType=OTHER}
  </insert>

  <update id="removeMasterSourceMetadata">
    UPDATE institution
    SET master_sync_metadata_key = null,
        master_source = 'GRSCICOLL'
    WHERE key = #{targetEntityKey,jdbcType=OTHER}
  </update>

  <select id="getMasterSourceMetadata" resultType="org.gbif.api.model.collections.MasterSourceMetadata">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.MasterSourceSyncMetadataMapper.METADATA_READ_FIELDS"/>
    FROM master_sync_metadata m
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <select id="getEntityMasterSourceMetadata" resultType="org.gbif.api.model.collections.MasterSourceMetadata">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.MasterSourceSyncMetadataMapper.METADATA_READ_FIELDS"/>
    FROM master_sync_metadata m
    INNER JOIN institution i ON i.master_sync_metadata_key = m.key
    WHERE i.key = #{targetEntityKey,jdbcType=OTHER}
  </select>

  <select id="findByMasterSource" resultMap="INSTITUTION_MAP">
    SELECT <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    INNER JOIN master_sync_metadata m ON i.master_sync_metadata_key = m.key
    WHERE m.source = #{source,jdbcType=OTHER} AND m.source_id = #{sourceId,jdbcType=VARCHAR}
  </select>
  <!-- END MASTER SOURCE -->
</mapper>
