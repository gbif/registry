<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.InstitutionMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="INSTITUTION_MAP" type="Institution" autoMapping="true">
    <id property="key" column="key"/>
    <result property="email" column="email" typeHandler="StringArrayTypeHandler"/>
    <result property="phone" column="phone" typeHandler="StringArrayTypeHandler"/>
    <result property="disciplines" column="discipline" typeHandler="DisciplineArrayTypeHandler"/>
    <result property="additionalNames" column="additional_names" typeHandler="StringArrayTypeHandler"/>
    <result property="alternativeCodes" column="alternative_codes" typeHandler="AlternativeCodesTypeHandler"/>
    <association property="address" column="address_key" select="listAddress" />
    <association property="mailingAddress" column="mailing_address_key" select="listAddress" />
    <collection property="contacts" column="key" select="listContacts"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="comments" column="key" select="listComments"/>
    <collection property="occurrenceMappings" column="key" select="listOccurrenceMappings"/>
  </resultMap>

  <resultMap id="INSTITUTION_MATCHED_DTO_MAP" type="InstitutionMatchedDto" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <sql id="INSTITUTION_WRITE_FIELDS">
    key, code, name, description, type, active, email, phone, homepage, catalog_url, api_url, institutional_governance, discipline,
    latitude, longitude, mailing_address_key, address_key, additional_names, founding_date, geographic_description,
    taxonomic_description, number_specimens, index_herbariorum_record, logo_url, cites_permit_number,
    created_by, modified_by, created, modified, alternative_codes
  </sql>

  <sql id="INSTITUTION_READ_FIELDS">
    i.key, i.code, i.name, i.description, i.type, i.active, i.email, i.phone, i.homepage, i.catalog_url, i.api_url,
    i.institutional_governance, i.discipline, i.latitude, i.longitude, i.mailing_address_key, i.address_key,
    i.additional_names, i.founding_date, i.geographic_description, i.taxonomic_description, i.number_specimens,
    i.index_herbariorum_record, i.logo_url, i.cites_permit_number, i.created_by, i.modified_by,
    i.created, i.modified, i.deleted, i.alternative_codes, i.replaced_by, i.converted_to_collection
  </sql>

  <sql id="INSTITUTION_PARAMS_CREATE">
    #{key,jdbcType=OTHER},
    #{code,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{type,jdbcType=OTHER},
    #{active,jdbcType=BOOLEAN},
    #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{homepage,jdbcType=VARCHAR},
    #{catalogUrl,jdbcType=VARCHAR},
    #{apiUrl,jdbcType=VARCHAR},
    #{institutionalGovernance,jdbcType=OTHER},
    #{disciplines,jdbcType=ARRAY,typeHandler=DisciplineArrayTypeHandler},
    #{latitude,jdbcType=NUMERIC},
    #{longitude,jdbcType=NUMERIC},
    #{mailingAddress.key,jdbcType=INTEGER},
    #{address.key,jdbcType=INTEGER},
    #{additionalNames,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{foundingDate,jdbcType=DATE},
    #{geographicDescription,jdbcType=VARCHAR},
    #{taxonomicDescription,jdbcType=VARCHAR},
    #{numberSpecimens,jdbcType=INTEGER},
    #{indexHerbariorumRecord,jdbcType=BOOLEAN},
    #{logoUrl,jdbcType=VARCHAR},
    #{citesPermitNumber,jdbcType=VARCHAR},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now(), <!-- modified -->
    #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore
  </sql>

  <sql id="INSTITUTION_PARAMS_UPDATE">
    code = #{code,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    type = #{type,jdbcType=OTHER},
    active = #{active,jdbcType=BOOLEAN},
    email = #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    phone = #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    homepage = #{homepage,jdbcType=VARCHAR},
    catalog_url = #{catalogUrl,jdbcType=VARCHAR},
    api_url = #{apiUrl,jdbcType=VARCHAR},
    institutional_governance = #{institutionalGovernance,jdbcType=OTHER},
    discipline = #{disciplines,jdbcType=ARRAY,typeHandler=DisciplineArrayTypeHandler},
    latitude = #{latitude,jdbcType=NUMERIC},
    longitude = #{longitude,jdbcType=NUMERIC},
    mailing_address_key = #{mailingAddress.key,jdbcType=INTEGER},
    address_key = #{address.key,jdbcType=INTEGER},
    additional_names = #{additionalNames,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    founding_date = #{foundingDate,jdbcType=DATE},
    geographic_description = #{geographicDescription,jdbcType=VARCHAR},
    taxonomic_description = #{taxonomicDescription,jdbcType=VARCHAR},
    number_specimens = #{numberSpecimens,jdbcType=INTEGER},
    index_herbariorum_record = #{indexHerbariorumRecord,jdbcType=BOOLEAN},
    logo_url = #{logoUrl,jdbcType=VARCHAR},
    cites_permit_number = #{citesPermitNumber,jdbcType=VARCHAR},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    deleted = null, <!-- if we're updating it can't be deleted -->
    alternative_codes = #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{params.query}))),'\s+',':*&amp;','g')||':*') AS query ON query @@ fulltext_search
  </sql>

  <insert id="create" parameterType="Institution">
    INSERT INTO institution(<include refid="INSTITUTION_WRITE_FIELDS"/>)
    VALUES(<include refid="INSTITUTION_PARAMS_CREATE"/>)
  </insert>

  <update id="update" parameterType="Institution">
    UPDATE institution
    SET <include refid="INSTITUTION_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE institution
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="INSTITUTION_MAP">
    SELECT <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    WHERE i.key = #{key,jdbcType=OTHER}
  </select>

  <select id="listContacts" resultMap="org.gbif.registry.persistence.mapper.collections.PersonMapper.COLLECTION_PERSON_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.PersonMapper.PERSON_READ_FIELDS"/>
    FROM collection_person p INNER JOIN institution_collection_person ON collection_person_key = p.key
    WHERE institution_key = #{key,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <insert id="addContact">
    INSERT INTO institution_collection_person(institution_key,collection_person_key)
    VALUES(
    #{entityKey,jdbcType=OTHER},
    #{personKey,jdbcType=OTHER}
    )
  </insert>

  <delete id="removeContact">
    DELETE FROM institution_collection_person
    WHERE
    institution_key = #{entityKey,jdbcType=OTHER} AND collection_person_key = #{personKey,jdbcType=INTEGER}
  </delete>

  <select id="listAddress" resultMap="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_READ_FIELDS"/>
    FROM address
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <select id="list" resultType="Institution"  resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (<if test="params.query != null" >ts_rank_cd(i.fulltext_search, query), </if>i.created, i.key) <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <if test="params.contactKey != null" >
      INNER JOIN institution_collection_person icp on icp.institution_key = i.key
    </if>
    <if test="params.machineTagNamespace != null || params.machineTagName != null || params.machineTagValue != null" >
      INNER JOIN institution_machine_tag imt on imt.institution_key = i.key
      INNER JOIN machine_tag mt on mt.key = imt.machine_tag_key
    </if>
    <if test="params.identifierType != null || params.identifier != null" >
      INNER JOIN institution_identifier ii on ii.institution_key = i.key
      INNER JOIN identifier id on id.key = ii.identifier_key
    </if>
    WHERE i.deleted IS NULL
    <if test="params.contactKey != null" >
      AND icp.collection_person_key = #{params.contactKey,jdbcType=OTHER}
    </if>
    <if test="params.code != null" >
      AND i.code = #{params.code,jdbcType=VARCHAR}
    </if>
    <if test="params.alternativeCode != null" >
      AND i.alternative_codes ?? #{params.alternativeCode,jdbcType=VARCHAR}
    </if>
    <if test="params.name != null" >
      AND i.name = #{params.name,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagNamespace != null" >
      AND mt.namespace = #{params.machineTagNamespace,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagName != null" >
      AND mt.name = #{params.machineTagName,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagValue != null" >
      AND mt.value = #{params.machineTagValue,jdbcType=VARCHAR}
    </if>
    <if test="params.identifierType != null" >
      AND id.type = #{params.identifierType,jdbcType=OTHER}
    </if>
    <if test="params.identifier != null" >
      AND id.identifier = #{params.identifier,jdbcType=VARCHAR}
    </if>
    ORDER BY <if test="params.query != null" >ts_rank_cd(i.fulltext_search, query) DESC, </if>i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM institution i
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <if test="params.contactKey != null" >
      INNER JOIN institution_collection_person icp on icp.institution_key = i.key
    </if>
    <if test="params.machineTagNamespace != null || params.machineTagName != null || params.machineTagValue != null" >
      INNER JOIN institution_machine_tag imt on imt.institution_key = i.key
      INNER JOIN machine_tag mt on mt.key = imt.machine_tag_key
    </if>
    <if test="params.identifierType != null || params.identifier != null" >
      INNER JOIN institution_identifier ii on ii.institution_key = i.key
      INNER JOIN identifier id on id.key = ii.identifier_key
    </if>
    WHERE i.deleted IS NULL
    <if test="params.contactKey != null" >
      AND icp.collection_person_key = #{params.contactKey,jdbcType=OTHER}
    </if>
    <if test="params.code != null" >
      AND i.code = #{params.code,jdbcType=VARCHAR}
    </if>
    <if test="params.alternativeCode != null" >
      AND i.alternative_codes ?? #{params.alternativeCode,jdbcType=VARCHAR}
    </if>
    <if test="params.name != null" >
      AND i.name = #{params.name,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagNamespace != null" >
      AND mt.namespace = #{params.machineTagNamespace,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagName != null" >
      AND mt.name = #{params.machineTagName,jdbcType=VARCHAR}
    </if>
    <if test="params.machineTagValue != null" >
      AND mt.value = #{params.machineTagValue,jdbcType=VARCHAR}
    </if>
    <if test="params.identifierType != null" >
      AND id.type = #{params.identifierType,jdbcType=OTHER}
    </if>
    <if test="params.identifier != null" >
      AND id.identifier = #{params.identifier,jdbcType=VARCHAR}
    </if>
  </select>

  <select id="deleted" resultType="Institution"  resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    WHERE i.deleted IS NOT NULL
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM institution
    WHERE deleted IS NOT NULL
  </select>

  <!-- LOOKUP -->
  <sql id="LOOKUP_MATCH_FIELDS">
    i.key, i.name, i.code, i.address_key, i.mailing_address_key
  </sql>

  <select id="lookup" resultMap="INSTITUTION_MATCHED_DTO_MAP">
    SELECT matches.*, addr.country addressCountry, mailing_addr.country mailingAddressCountry, id.identifier
    FROM (
    <trim prefixOverrides="UNION ALL">
    <if test="key != null" >
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      1 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      WHERE i.key = #{key,jdbcType=OTHER} AND i.deleted is null
    </if>
    <if test="identifier != null" >
    UNION ALL
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      0 AS key_match, 1 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      INNER JOIN institution_identifier ii ON ii.institution_key = i.key
      INNER JOIN identifier id ON ii.identifier_key = id."key"
      WHERE normalize_identifier(id.identifier) = normalize_identifier(#{identifier,jdbcType=VARCHAR}) AND i.deleted is null
    UNION ALL
      SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
      0 AS key_match, 0 AS identifier_match, 1 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
      0 AS name_match_with_code, 0 AS explicit_mapping
      FROM institution i
      WHERE normalize_name(i.name) = normalize_name(#{identifier,jdbcType=VARCHAR}) AND i.deleted is null
    </if>
    <if test="code != null" >
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 1 AS code_match, 0 AS alternative_code_match,
        0 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE i.code = #{code,jdbcType=VARCHAR} AND i.deleted is null
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 1 AS alternative_code_match,
        0 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE i.alternative_codes ?? #{code,jdbcType=VARCHAR} AND i.deleted is null
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
        1 AS name_match_with_code, 0 AS explicit_mapping
        FROM institution i
        WHERE normalize_name(i.name) = normalize_name(#{code,jdbcType=VARCHAR}) AND i.deleted is null
    </if>
      <if test="datasetKey != null">
      UNION ALL
        SELECT DISTINCT ON (i.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
        0 AS name_match_with_code, 1 AS explicit_mapping
        FROM institution i
        INNER JOIN institution_occurrence_mapping iom ON iom.institution_key = i.key
        INNER JOIN occurrence_mapping om ON om.key = iom.occurrence_mapping_key
        WHERE i.deleted is null AND om.dataset_key = #{datasetKey,jdbcType=OTHER}
        <if test="code != null"> AND (om.code IS NULL OR om.code = #{code,jdbcType=VARCHAR})</if>
        <if test="identifier != null"> AND (om.identifier IS NULL OR om.identifier = #{identifier,jdbcType=VARCHAR})</if>
      </if>
    </trim>) AS matches
    LEFT JOIN institution_identifier ii ON ii.institution_key = matches.key
    LEFT JOIN identifier id ON ii.identifier_key = id."key"
    LEFT JOIN address addr ON addr.key = matches.address_key
    LEFT JOIN address mailing_addr ON mailing_addr.key = matches.mailing_address_key
  </select>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO institution_tag(institution_key,tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{tagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN institution_tag ON tag_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING institution_tag
    WHERE
    tag_key = tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  <!-- END TAGS -->

  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO institution_identifier(institution_key,identifier_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{identifierKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN institution_identifier ON identifier_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING institution_identifier
    WHERE
    identifier_key = identifier.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <!-- we don't want to return deleted institutions in the identifier resolver -->
  <select id="findByIdentifier" resultType="java.util.UUID">
    SELECT inst.key
    FROM institution inst
    INNER JOIN institution_identifier ii ON ii.institution_key = inst.key
    INNER JOIN identifier i ON i."key" = ii.identifier_key
    WHERE regexp_replace(i.identifier, 'http://', '') = regexp_replace(#{identifier,jdbcType=VARCHAR}, 'http://', '')
      AND inst.deleted IS NULL;
  </select>
  <!-- END IDENTIFIERS -->

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO institution_machine_tag(institution_key,machine_tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN institution_machine_tag ON machine_tag_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING institution_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING institution_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="INSTITUTION_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (i.key) <include refid="INSTITUTION_READ_FIELDS"/>
    FROM institution i
    INNER JOIN institution_machine_tag im ON im.institution_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY i.key, i.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM institution i
    INNER JOIN institution_machine_tag im ON im.institution_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>
  <!-- END MACHINE TAGS -->

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.collections.KeyCodeNameResult">
    SELECT key,code,name FROM (
    (SELECT key,code,name FROM institution WHERE code ilike #{q}||'%' ORDER BY code LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM institution WHERE name ilike #{q}||'%' ORDER BY name LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM institution WHERE code ilike '%'||#{q}||'%' AND NOT code ilike #{q}||'%' ORDER BY code LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM institution WHERE name ilike '%'||#{q}||'%' AND NOT name ilike #{q}||'%' ORDER BY name LIMIT 20)
    ) t1 LIMIT 20
  </select>

  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO institution_comment(institution_key,comment_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{commentKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listComments" resultType="org.gbif.api.model.registry.Comment">
    SELECT <include refid="org.gbif.registry.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment
    INNER JOIN institution_comment ON comment_key = key
    WHERE institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of comment to trigger cascade delete of the join table -->
  <delete id="deleteComment">
    DELETE FROM comment USING institution_comment
    WHERE
    comment_key = comment.key AND
    institution_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>
  <!-- END COMMENTS -->

  <!-- OCCURRENCE MAPPINGS -->
  <insert id="addOccurrenceMapping">
    INSERT INTO institution_occurrence_mapping(institution_key, occurrence_mapping_key)
    VALUES(
      #{targetEntityKey,jdbcType=OTHER},
      #{occurrenceMappingKey,jdbcType=INTEGER}
    )
  </insert>

  <update id="updateOccurrenceMappingEntity">
    UPDATE occurrence_mapping
    SET
    WHERE
    occurrence_mapping_key = occurrence_mapping.key
    AND institution_key = #{targetEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <update id="deleteOccurrenceMapping">
    DELETE FROM occurrence_mapping USING institution_occurrence_mapping
    WHERE
    occurrence_mapping_key = occurrence_mapping.key
    AND institution_key = #{targetEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <select id="listOccurrenceMappings" resultType="org.gbif.api.model.collections.OccurrenceMapping">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.OccurrenceMappingMapper.OCCURRENCE_MAPPING_FIELDS"/>
    FROM occurrence_mapping
    INNER JOIN institution_occurrence_mapping  iom ON iom.occurrence_mapping_key = key
    WHERE iom.institution_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>
  <!-- END EXPLICIT MAPPINGS -->

  <!-- MERGE -->
  <update id="replace">
    UPDATE institution
    SET deleted = now(),
        replaced_by = #{replacementKey,jdbcType=OTHER}
    WHERE key = #{targetEntityKey,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <update id="moveIdentifier">
    UPDATE institution_identifier
    SET institution_key = #{targetEntityKey,jdbcType=OTHER}
    WHERE institution_key = #{sourceEntityKey,jdbcType=OTHER}
    AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </update>

  <update id="moveMachineTag">
    UPDATE institution_machine_tag
    SET institution_key = #{targetEntityKey,jdbcType=OTHER}
    WHERE institution_key = #{sourceEntityKey,jdbcType=OTHER}
    AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </update>

  <update id="moveOccurrenceMapping">
    UPDATE institution_occurrence_mapping
    SET institution_key = #{targetEntityKey,jdbcType=OTHER}
    WHERE institution_key = #{sourceEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <update id="convertToCollection">
    UPDATE institution
    SET deleted = now(),
        converted_to_collection = #{collectionKey,jdbcType=OTHER}
    WHERE key = #{institutionKey,jdbcType=OTHER} AND deleted IS NULL
  </update>
  <!-- END MERGE -->
</mapper>
