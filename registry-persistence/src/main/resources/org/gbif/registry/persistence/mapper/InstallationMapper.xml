<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.InstallationMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="INSTALLATION_MAP" type="org.gbif.api.model.registry.Installation" autoMapping="true">
    <id property="key" column="key"/>
    <collection property="contacts" column="key" select="listContacts"/>
    <collection property="endpoints" column="key" select="listEndpoints"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="comments" column="key" select="listComments"/>
  </resultMap>

  <sql id="WRITABLE_INSTALLATION_FIELDS">
    key,organization_key,password,type,title,description,created,created_by,modified,modified_by,disabled
  </sql>

  <sql id="INSTALLATION_FIELDS">
    i.key,i.organization_key,i.password,i.type,i.title,i.description,i.created,i.created_by,i.modified,i.modified_by,i.deleted,i.disabled
  </sql>

  <!--
    Simple fulltext search on the search field or contact search field.
    to_tsquery() is used to handle ALL stuff from the URL so the limitations are constrained by this method.
    Uses the default configuration english for the English language.
   -->
  <sql id="SIMPLE_SEARCH">
    AND (
          query @@ i.fulltext_search
          OR EXISTS(
          SELECT contact_key
          FROM installation_contact JOIN contact c ON c.key = contact_key
          WHERE installation_key=i.key AND query @@ c.fulltext_search
          )
        )
  </sql>

  <!--
    key, password, created and deleted are never changed
   -->
  <sql id="INSTALLATION_UPDATE">
    organization_key = #{organizationKey,jdbcType=OTHER},
    type = #{type,jdbcType=OTHER},
    title = #{title,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    modified = now(),
    modified_by = #{modifiedBy},
    deleted = null, <!-- if we're updating it can't be deleted -->
    disabled = #{disabled,jdbcType=BOOLEAN}
  </sql>

  <sql id="WRITABLE_INSTALLATION_FIELD_TYPES">
    #{key,jdbcType=OTHER},
    #{organizationKey,jdbcType=OTHER},
    #{password,jdbcType=VARCHAR},
    #{type,jdbcType=OTHER},
    #{title,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    now(), <!-- created -->
    #{createdBy},
    now(), <!-- modified -->
    #{createdBy},
    #{disabled,jdbcType=BOOLEAN}
  </sql>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="INSTALLATION_MAP">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    WHERE i.key = #{key,jdbcType=OTHER}
  </select>

  <select id="title" resultType="String">
    SELECT title
    FROM installation
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <insert id="create" parameterType="org.gbif.api.model.registry.Installation">
    INSERT INTO installation(<include refid="WRITABLE_INSTALLATION_FIELDS"/>)
    VALUES(<include refid="WRITABLE_INSTALLATION_FIELD_TYPES"/>)
  </insert>

  <update id="update" parameterType="org.gbif.api.model.registry.Installation">
    UPDATE installation
    SET <include refid="INSTALLATION_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE installation
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!-- Append safe ordering, omitting deleted entities -->
  <select id="list" resultType="org.gbif.api.model.registry.Installation"  resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    WHERE i.deleted IS NULL
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <!-- Basic paging search functionality -->
  <select id="search" resultMap="INSTALLATION_MAP">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i<if test="query != null" >, to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query</if>
    WHERE deleted IS NULL
    <if test="query != null" >
      <include refid="SIMPLE_SEARCH"/>
    </if>
    ORDER BY <if test="query != null" >ts_rank_cd(i.fulltext_search, query) DESC, </if>created DESC, key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Integer">
    SELECT COUNT(*)
    FROM installation i<if test="query != null" >, to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query</if>
    WHERE deleted IS NULL
    <if test="query != null" >
      <include refid="SIMPLE_SEARCH"/>
    </if>
  </select>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO installation_tag(installation_key,tag_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{tagKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listTags" resultType="org.gbif.api.model.registry.Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN installation_tag ON tag_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING installation_tag
    WHERE
      tag_key = tag.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>

  <!-- CONTACTS -->
  <insert id="addContact">
    INSERT INTO installation_contact(installation_key,contact_key, type, is_primary)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{contactKey,jdbcType=INTEGER},
            #{type,jdbcType=OTHER},
            #{isPrimary,jdbcType=BOOLEAN}
          )
  </insert>

  <!-- Update existing primary contacts of a type to false -->
  <update id="updatePrimaryContacts">
    UPDATE installation_contact
    SET is_primary=false
    WHERE installation_key=#{targetEntityKey,jdbcType=OTHER} AND type=#{type,jdbcType=OTHER}
  </update>

  <!-- Update contact type and is_primary -->
  <update id="updateContact">
    UPDATE installation_contact
    SET is_primary=#{primary,jdbcType=BOOLEAN},
        type=#{type,jdbcType=OTHER}
    WHERE installation_key=#{targetEntityKey,jdbcType=OTHER} AND contact_key=#{contactKey,jdbcType=INTEGER}
  </update>

  <!-- List of contacts returned in ascending created date, preserving same order in which they were persisted -->
  <select id="listContacts" resultMap="org.gbif.registry.persistence.mapper.ContactMapper.CONTACT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.ContactMapper.CONTACT_FIELDS"/>
    FROM contact INNER JOIN installation_contact ON contact_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <!-- Joined delete of contact to trigger cascade delete of the join table -->
  <delete id="deleteContact">
    DELETE FROM contact USING installation_contact
    WHERE
      contact_key = contact.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND contact_key = #{contactKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteContacts">
    DELETE FROM contact USING installation_contact
    WHERE
      contact_key = contact.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER}
  </delete>

  <select id="areRelated" resultType="boolean">
    SELECT true
    FROM installation_contact
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
      AND contact_key = #{contactKey,jdbcType=INTEGER}
    LIMIT 1
  </select>

  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO installation_identifier(installation_key,identifier_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{identifierKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listIdentifiers" resultType="org.gbif.api.model.registry.Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN installation_identifier ON identifier_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING installation_identifier
    WHERE
      identifier_key = identifier.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <!-- ENDPOINTS -->
  <insert id="addEndpoint">
    INSERT INTO installation_endpoint(installation_key,endpoint_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{endpointKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listEndpoints" resultMap="org.gbif.registry.persistence.mapper.EndpointMapper.ENDPOINT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.EndpointMapper.ENDPOINT_FIELDS"/>
    FROM endpoint INNER JOIN installation_endpoint ON endpoint_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of endpoint to trigger cascade delete of the join table -->
  <delete id="deleteEndpoint">
    DELETE FROM endpoint USING installation_endpoint
    WHERE
      endpoint_key = endpoint.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND endpoint_key = #{endpointKey,jdbcType=INTEGER}
  </delete>

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO installation_machine_tag(installation_key,machine_tag_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{machineTagKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listMachineTags" resultType="org.gbif.api.model.registry.MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN installation_machine_tag ON machine_tag_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING installation_machine_tag
    WHERE
      machine_tag_key = machine_tag.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING installation_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    installation_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT DISTINCT ON (i.key) <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    INNER JOIN installation_machine_tag im ON im.installation_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY i.key, i.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM installation i
    INNER JOIN installation_machine_tag im ON im.installation_key = i.key
    INNER JOIN machine_tag m ON im.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>

  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO installation_comment(installation_key,comment_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{commentKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listComments" resultType="org.gbif.api.model.registry.Comment">
    SELECT <include refid="org.gbif.registry.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment INNER JOIN installation_comment ON comment_key = key
    WHERE installation_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of comment to trigger cascade delete of the join table -->
  <delete id="deleteComment">
    DELETE FROM comment USING installation_comment
    WHERE
      comment_key = comment.key AND
      installation_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>

  <select id="listInstallationsEndorsedBy" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    INNER JOIN organization o ON i.organization_key=o.key AND o.deleted IS NULL
    INNER JOIN node n ON o.endorsing_node_key=n.key AND n.deleted IS NULL
    WHERE i.deleted IS NULL AND n.key=#{nodeKey,jdbcType=OTHER}
    ORDER BY created DESC, key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countInstallationsEndorsedBy" resultType="Long">
    SELECT count(*)
    FROM installation i
           INNER JOIN organization o ON i.organization_key=o.key AND o.deleted IS NULL
           INNER JOIN node n ON o.endorsing_node_key=n.key AND n.deleted IS NULL
    WHERE i.deleted IS NULL AND n.key=#{nodeKey,jdbcType=OTHER}
  </select>

  <select id="listInstallationsByOrganization" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    INNER JOIN organization o ON i.organization_key=o.key AND o.deleted IS NULL
    WHERE i.deleted IS NULL AND o.key=#{organizationKey,jdbcType=OTHER}
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countInstallationsByOrganization" resultType="Long">
    SELECT count(*)
    FROM installation i
           INNER JOIN organization o ON i.organization_key=o.key AND o.deleted IS NULL
    WHERE i.deleted IS NULL AND o.key=#{organizationKey,jdbcType=OTHER}
  </select>

  <select id="deleted" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    WHERE i.deleted IS NOT NULL
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM installation
    WHERE deleted IS NOT NULL
  </select>

  <select id="nonPublishing" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    LEFT JOIN dataset ds ON ds.installation_key = i.key
    WHERE ds.key IS NULL
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countNonPublishing" resultType="Long">
    SELECT count(*)
    FROM installation i
           LEFT JOIN dataset ds ON ds.installation_key = i.key
    WHERE ds.key IS NULL
  </select>

  <select id="listByIdentifier" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT DISTINCT ON (i.key) <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    INNER JOIN installation_identifier ON installation_key = i.key
    INNER JOIN identifier ide ON identifier_key = ide.key
    WHERE identifier = #{identifier,jdbcType=VARCHAR}
    <if test="type != null" >
      AND ide.type=#{type,jdbcType=OTHER}
    </if>
    ORDER BY i.key, i.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countByIdentifier" resultType="Long">
    SELECT count(DISTINCT i.key)
    FROM installation i
    INNER JOIN installation_identifier ON installation_key = i.key
    INNER JOIN identifier ide ON identifier_key = ide.key
    WHERE identifier = #{identifier,jdbcType=VARCHAR}
    <if test="type != null" >
      AND ide.type=#{type,jdbcType=OTHER}
    </if>
  </select>

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.KeyTitleResult">
    SELECT key,title FROM (
                            (SELECT key,title FROM installation WHERE title ilike #{q}||'%' ORDER BY title LIMIT 25)
                            UNION ALL
                            (SELECT key,title FROM installation WHERE title ilike '%'||#{q}||'%' AND NOT title ilike #{q}||'%' ORDER BY title LIMIT 25)
                          ) t1 LIMIT 25
  </select>

  <select id="countWithFilter" resultType="Integer">
    SELECT COUNT(*)
    FROM installation i
    WHERE i.deleted IS NULL
    <if test="type != null" >
      AND i.type = #{type,jdbcType=OTHER}
    </if>
  </select>

  <select id="listWithFilter" resultMap="INSTALLATION_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="INSTALLATION_FIELDS"/>
    FROM installation i
    <where>
      i.deleted IS NULL
      <if test="type != null" > AND i.type = #{type,jdbcType=OTHER}</if>
    </where>
    ORDER BY i.created DESC, i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
</mapper>
