<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.CollectionMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="COLLECTION_MAP" type="SciCollection" autoMapping="true">
    <id property="key" column="key"/>
    <result property="email" column="email" typeHandler="StringArrayTypeHandler"/>
    <result property="phone" column="phone" typeHandler="StringArrayTypeHandler"/>
    <result property="contentTypes" column="content_type" typeHandler="StringArrayTypeHandler"/>
    <result property="preservationTypes" column="preservation_type" typeHandler="StringArrayTypeHandler"/>
    <result property="incorporatedCollections" column="incorporated_collections" typeHandler="StringArrayTypeHandler"/>
    <result property="alternativeCodes" column="alternative_codes" typeHandler="AlternativeCodesTypeHandler"/>
    <result property="catalogUrls" column="catalog_url" typeHandler="UriArrayTypeHandler"/>
    <result property="apiUrls" column="api_url" typeHandler="UriArrayTypeHandler"/>
    <association property="address" column="address_key" select="listAddress" />
    <association property="mailingAddress" column="mailing_address_key" select="listAddress" />
    <collection property="contactPersons" column="key" select="listContactPersons"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="comments" column="key" select="listComments"/>
    <collection property="occurrenceMappings" column="key" select="listOccurrenceMappings"/>
    <collection property="masterSourceMetadata" column="master_sync_metadata_key" select="getMasterSourceMetadata"/>
  </resultMap>

  <resultMap id="COLLECTION_DTO_MAP" type="CollectionDto" autoMapping="true">
    <association property="collection" resultMap="COLLECTION_MAP" />
  </resultMap>

  <resultMap id="COLLECTION_MATCHED_DTO_MAP" type="CollectionMatchedDto" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <resultMap id="MASTER_SOURCE_ORG_DTO_MAP" type="MasterSourceOrganizationDto" autoMapping="true" />

  <sql id="COLLECTION_WRITE_FIELDS">
    key, code, name, description, content_type, active, personal_collection, doi, email, phone, homepage, catalog_url, api_url,
    preservation_type, accession_status, institution_key, mailing_address_key, address_key,
    created_by, modified_by, created, modified, number_specimens,
    taxonomic_coverage, geographic_coverage, notes, incorporated_collections, alternative_codes,
    master_source, division, department, display_on_NHCPortal, featured_image_url, featured_image_license, temporal_coverage, featured_image_attribution
  </sql>

  <sql id="COLLECTION_READ_FIELDS">
    c.key, c.code, c.name, c.description, c.content_type, c.active, c.personal_collection, c.doi, c.email, c.phone, c.homepage,
    c.catalog_url, c.api_url, c.preservation_type, c.accession_status, c.institution_key, c.mailing_address_key,
    c.address_key, c.created_by, c.modified_by, c.created, c.modified, c.deleted, c.number_specimens,
    c.taxonomic_coverage, c.geographic_coverage, c.notes, c.incorporated_collections, c.alternative_codes,
    c.replaced_by, c.master_source, c.master_sync_metadata_key, c.division, c.department, c.display_on_NHCPortal,
    c.occurrence_count, c.type_specimen_count, c.featured_image_url, c.featured_image_license, c.temporal_coverage, c.featured_image_attribution
  </sql>

  <sql id="COLLECTION_PARAMS_CREATE">
    #{key,jdbcType=OTHER},
    #{code,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{contentTypes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{active,jdbcType=BOOLEAN},
    #{personalCollection,jdbcType=BOOLEAN},
    #{doi,jdbcType=VARCHAR},
    #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{homepage,jdbcType=VARCHAR},
    #{catalogUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{apiUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    #{preservationTypes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{accessionStatus,jdbcType=VARCHAR},
    #{institutionKey,jdbcType=OTHER},
    #{mailingAddress.key,jdbcType=INTEGER},
    #{address.key,jdbcType=INTEGER},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now(), <!-- modified -->
    #{numberSpecimens,jdbcType=INTEGER},
    #{taxonomicCoverage,jdbcType=VARCHAR},
    #{geographicCoverage,jdbcType=VARCHAR},
    #{notes,jdbcType=VARCHAR},
    #{incorporatedCollections,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore,
    #{masterSource,jdbcType=OTHER},
    #{division,jdbcType=VARCHAR},
    #{department,jdbcType=VARCHAR},
    #{displayOnNHCPortal,jdbcType=BOOLEAN},
    #{featuredImageUrl,jdbcType=VARCHAR},
    #{featuredImageLicense,jdbcType=OTHER},
    #{temporalCoverage,jdbcType=VARCHAR},
    #{featuredImageAttribution,jdbcType=VARCHAR}
  </sql>

  <sql id="COLLECTION_PARAMS_UPDATE">
    code = #{code,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    content_type = #{contentTypes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    active = #{active,jdbcType=BOOLEAN},
    personal_collection = #{personalCollection,jdbcType=BOOLEAN},
    doi = #{doi,jdbcType=VARCHAR},
    email = #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    phone = #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    homepage = #{homepage,jdbcType=VARCHAR},
    catalog_url = #{catalogUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    api_url = #{apiUrls,jdbcType=ARRAY,typeHandler=UriArrayTypeHandler},
    preservation_type = #{preservationTypes,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    accession_status = #{accessionStatus,jdbcType=VARCHAR},
    institution_key = #{institutionKey,jdbcType=OTHER},
    mailing_address_key = #{mailingAddress.key,jdbcType=INTEGER},
    address_key = #{address.key,jdbcType=INTEGER},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    deleted = null, <!-- if we're updating it can't be deleted -->
    number_specimens = #{numberSpecimens,jdbcType=INTEGER},
    taxonomic_coverage = #{taxonomicCoverage,jdbcType=VARCHAR},
    geographic_coverage = #{geographicCoverage,jdbcType=VARCHAR},
    notes = #{notes,jdbcType=VARCHAR},
    incorporated_collections = #{incorporatedCollections,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    alternative_codes = #{alternativeCodes,jdbcType=OTHER,typeHandler=AlternativeCodesTypeHandler}::hstore,
    division = #{division,jdbcType=VARCHAR},
    department = #{department,jdbcType=VARCHAR},
    display_on_NHCPortal = #{displayOnNHCPortal,jdbcType=BOOLEAN},
    featured_image_url = #{featuredImageUrl,jdbcType=VARCHAR},
    featured_image_license = #{featuredImageLicense,jdbcType=OTHER},
    temporal_coverage = #{temporalCoverage,jdbcType=VARCHAR},
    featured_image_attribution= #{featuredImageAttribution,jdbcType=VARCHAR}
    <!-- not allowed to change neither the masterSource nor the master source metadata in the update -->
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{params.query}))),'\s+',':* &amp; ','g')||':*') AS query ON query @@ c.fulltext_search
    OR EXISTS(
      SELECT collection_contact_key
      FROM collection_collection_contact JOIN collection_contact cc ON cc.key = collection_contact_key
      WHERE collection_key = c.key AND query @@ cc.fulltext_search
    )
  </sql>

  <insert id="create" parameterType="SciCollection">
    INSERT INTO collection(<include refid="COLLECTION_WRITE_FIELDS"/>)
    VALUES(<include refid="COLLECTION_PARAMS_CREATE"/>)
  </insert>

  <update id="update" parameterType="SciCollection">
    UPDATE collection
    SET <include refid="COLLECTION_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE collection
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="COLLECTION_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    WHERE c.key = #{key,jdbcType=OTHER}
  </select>

  <select id="exists" resultType="Boolean">
    SELECT count(1)
    FROM collection c
    WHERE c.key = #{key,jdbcType=OTHER}
  </select>

  <select id="getCollectionDto" resultMap="COLLECTION_DTO_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>, inst.name institutionName, inst.code institutionCode
    FROM collection c
    LEFT JOIN institution inst ON inst.key = c.institution_key
    WHERE c.key = #{collectionKey,jdbcType=OTHER}
  </select>

  <select id="getCollectionDtos" resultMap="COLLECTION_DTO_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>, inst.name institutionName, inst.code institutionCode
    FROM collection c
    LEFT JOIN institution inst ON inst.key = c.institution_key
    WHERE c.key IN
    <foreach collection="keys" item="key" separator="," open="(" close=")">
      #{key,jdbcType=OTHER}
    </foreach>
  </select>

  <select id="getInstitutionKey" resultType="java.util.UUID" >
    SELECT institution_key
    FROM collection
    WHERE key = #{collectionKey,jdbcType=OTHER}
  </select>

  <select id="listAddress" resultMap="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_READ_FIELDS"/>
    FROM address
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <!-- Basic paging search functionality -->
  <select id="list" resultType="CollectionDto" resultMap="COLLECTION_DTO_MAP" parameterType="Pageable">
    SELECT * FROM(
      SELECT DISTINCT ON (<if test="params.query != null" >ts_rank_cd(c.fulltext_search, query), </if>
                          <if test="params.fuzzyName != null">similarity_score, </if>
                          c.created, c.key)
            <include refid="COLLECTION_READ_FIELDS"/>, inst.name institutionName, inst.code institutionCode, c.fulltext_search
            <if test="params.query != null" >,query</if>
            <if test="params.fuzzyName != null">,similar_name_score(c.name, #{params.fuzzyName,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler}::text[]) AS similarity_score</if>
    FROM collection c
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <include refid="LIST_FILTER" />
    ) AS c
    ORDER BY
    <include refid="org.gbif.registry.persistence.mapper.collections.Common.sortBy">
      <property name="alias" value="c."/>
    </include>
    <if test="params.query != null" >ts_rank_cd(c.fulltext_search, query) DESC, </if>
             <if test="params.fuzzyName != null" >similarity_score DESC, </if>
             c.created DESC, c.key
    <if test="params.page != null" >
      LIMIT #{params.page.limit} OFFSET #{params.page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT count(DISTINCT c.key)
    FROM collection c
    <if test="params.query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <include refid="LIST_FILTER" />
  </select>

  <sql id="LIST_FILTER">
    LEFT JOIN institution inst ON inst.key = c.institution_key
    <if test="params.machineTagNamespace != null || params.machineTagName != null || params.machineTagValue != null" >
      INNER JOIN collection_machine_tag cmt on cmt.collection_key = c.key
      INNER JOIN machine_tag mt on mt.key = cmt.machine_tag_key
    </if>
    <if test="params.identifierType != null || params.identifier != null" >
      INNER JOIN collection_identifier ci on ci.collection_key = c.key
      INNER JOIN identifier id on id.key = ci.identifier_key
    </if>
    <if test="params.contactUserId != null || params.contactEmail != null" >
      INNER JOIN collection_collection_contact ccc on ccc.collection_key = c.key
      INNER JOIN collection_contact cc on cc.key = ccc.collection_contact_key
    </if>
    <!-- Hierarchical concept-based filtering for content types -->
    <if test="params.contentTypes != null and params.contentTypes.size > 0">
      INNER JOIN collection_concept_links cfl_content ON cfl_content.collection_key = c.key
      INNER JOIN grscicoll_vocab_concept f_content ON cfl_content.concept_key = f_content.concept_key
        AND f_content.vocabulary_name = 'CollectionContentType'
        AND lower(f_content.name) IN
        <foreach item="item" collection="params.contentTypes" open="(" separator="," close=")">
          lower(#{item,jdbcType=VARCHAR})
        </foreach>
    </if>
    <!-- Hierarchical concept-based filtering for preservation types -->
    <if test="params.preservationTypes != null and params.preservationTypes.size > 0">
      INNER JOIN collection_concept_links cfl_preservation ON cfl_preservation.collection_key = c.key
      INNER JOIN grscicoll_vocab_concept f_preservation ON cfl_preservation.concept_key = f_preservation.concept_key
        AND f_preservation.vocabulary_name = 'PreservationType'
        AND lower(f_preservation.name) IN
        <foreach item="item" collection="params.preservationTypes" open="(" separator="," close=")">
          lower(#{item,jdbcType=VARCHAR})
        </foreach>
    </if>
    <!-- Hierarchical concept-based filtering for accession status -->
    <if test="params.accessionStatus != null and params.accessionStatus.size > 0">
      INNER JOIN collection_concept_links cfl_accession ON cfl_accession.collection_key = c.key
      INNER JOIN grscicoll_vocab_concept f_accession ON cfl_accession.concept_key = f_accession.concept_key
        AND f_accession.vocabulary_name = 'AccessionStatus'
        AND lower(f_accession.name) IN
        <foreach item="item" collection="params.accessionStatus" open="(" separator="," close=")">
          lower(#{item,jdbcType=VARCHAR})
        </foreach>
    </if>
    LEFT JOIN address addr ON addr.key = c.address_key
    LEFT JOIN address mail_addr ON mail_addr.key = c.mailing_address_key
    <if test="params.source != null || params.sourceId != null">
        INNER JOIN master_sync_metadata m ON c.master_sync_metadata_key = m.key
    </if>
    <where>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.COMMON_LIST_FILTER">
        <property name="alias" value="c."/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_BOOLEAN_FILTER">
        <property name="values" value="params.personalCollection"/>
        <property name="field" value="c.personal_collection"/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_FILTER">
        <property name="values" value="params.institutionKeys"/>
        <property name="field" value="c.institution_key"/>
      </include>
    </where>
  </sql>

  <select id="deleted" resultType="CollectionDto"  resultMap="COLLECTION_DTO_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>, inst.name institutionName, inst.code institutionCode
    FROM collection c
    LEFT JOIN institution inst ON inst.key = c.institution_key
    WHERE c.deleted IS NOT NULL
    <if test="replacedBy != null" >
      AND c.replaced_by = #{replacedBy,jdbcType=OTHER}
    </if>
    ORDER BY c.created DESC, c.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM collection
    WHERE deleted IS NOT NULL
    <if test="replacedBy != null" >
      AND replaced_by = #{replacedBy,jdbcType=OTHER}
    </if>
  </select>

  <update id="updateCounts">
    UPDATE collection
    SET occurrence_count = aux.occ_count,
        type_specimen_count = aux.ts_count
    FROM
    ( VALUES
    <foreach item="item" collection="counts" open="" separator="," close="">
      (#{item.key,jdbcType=OTHER}, #{item.occurrenceCount,jdbcType=INTEGER}, #{item.typeSpecimenCount,jdbcType=INTEGER})
    </foreach>
    ) as aux (entity_key, occ_count, ts_count)
    WHERE key = aux.entity_key::uuid
  </update>

  <select id="getAllKeys" resultType="java.util.UUID">
    SELECT key FROM collection WHERE deleted IS NULL
  </select>

  <!-- new model contacts -->
  <select id="listContactPersons" resultMap="org.gbif.registry.persistence.mapper.collections.CollectionContactMapper.CONTACT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.CollectionContactMapper.CONTACT_READ_FIELDS"/>
    FROM collection_contact INNER JOIN collection_collection_contact ON collection_contact_key = key
    WHERE collection_key = #{key,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <insert id="addContactPerson">
    INSERT INTO collection_collection_contact(collection_key,collection_contact_key)
    VALUES(
    #{entityKey,jdbcType=OTHER},
    #{contactKey,jdbcType=INTEGER}
    )
  </insert>

  <delete id="removeContactPerson">
    DELETE FROM collection_contact USING collection_collection_contact
    WHERE
    collection_contact_key = collection_contact.key AND
    collection_key = #{entityKey,jdbcType=OTHER} AND
    collection_contact_key = #{contactKey,jdbcType=INTEGER}
  </delete>

  <delete id="removeAllContactPersons">
    DELETE FROM collection_contact USING collection_collection_contact
    WHERE
    collection_contact_key = collection_contact.key AND
    collection_key = #{entityKey,jdbcType=OTHER}
  </delete>

  <!-- LOOKUP -->
  <sql id="LOOKUP_MATCH_FIELDS">
    c.key, c.name, c.code, c.institution_key, c.address_key, c.mailing_address_key, c.active
  </sql>

  <select id="lookup" resultMap="COLLECTION_MATCHED_DTO_MAP">
    SELECT matches.*, i.code institutionCode, i.name institutionName, addr.country addressCountry, mailing_addr.country mailingAddressCountry
    FROM (
    <trim prefixOverrides="UNION ALL">
      <if test="key != null" >
        SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
        1 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
        0 AS name_match_with_code, 0 AS explicit_mapping
        FROM collection c
        WHERE c.key = #{key,jdbcType=OTHER} AND c.deleted is null
      </if>
      <if test="identifier != null" >
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 1 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
          0 AS name_match_with_code, 0 AS explicit_mapping
          FROM collection c
          INNER JOIN collection_identifier ci ON ci.collection_key = c.key
          INNER JOIN identifier id ON ci.identifier_key = id.key AND id.type != 'GRSCICOLL_ID'
          WHERE normalize_identifier(id.identifier) = normalize_identifier(#{identifier,jdbcType=VARCHAR}) AND c.deleted is null
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 0 AS identifier_match, 1 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
          0 AS name_match_with_code, 0 AS explicit_mapping
          FROM collection c
          WHERE normalize_name(c.name) = normalize_name(#{identifier,jdbcType=VARCHAR}) AND c.deleted is null
      </if>
      <if test="code != null" >
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 1 AS code_match, 0 AS alternative_code_match,
          0 AS name_match_with_code, 0 AS explicit_mapping
          FROM collection c
          WHERE lower(c.code) = lower(#{code,jdbcType=VARCHAR}) AND c.deleted is null
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 1 AS alternative_code_match,
          0 AS name_match_with_code, 0 AS explicit_mapping
          FROM collection c
          WHERE c.deleted IS NULL AND c.alternative_codes_lower @> ARRAY[lower(#{code,jdbcType=VARCHAR})]
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
          1 AS name_match_with_code, 0 AS explicit_mapping
          FROM collection c
          WHERE normalize_name(c.name) = normalize_name(#{code,jdbcType=VARCHAR}) AND c.deleted is null
      </if>
      <if test="datasetKey != null">
        UNION ALL
          SELECT DISTINCT ON (c.key) <include refid="LOOKUP_MATCH_FIELDS"/>,
          0 AS key_match, 0 AS identifier_match, 0 AS name_match_with_identifier, 0 AS code_match, 0 AS alternative_code_match,
          0 AS name_match_with_code, 1 AS explicit_mapping
          FROM collection c
          INNER JOIN collection_occurrence_mapping com ON com.collection_key = c.key
          INNER JOIN occurrence_mapping om ON om.key = com.occurrence_mapping_key
          WHERE c.deleted is null AND om.dataset_key = #{datasetKey,jdbcType=OTHER}
          <if test="code != null"> AND (om.code IS NULL OR om.code = #{code,jdbcType=VARCHAR})</if>
          <if test="parentCode != null"> AND (om.parent_code IS NULL OR lower(om.parent_code) = lower(#{parentCode,jdbcType=VARCHAR}))</if>
          <if test="identifier != null"> AND (om.identifier IS NULL OR om.identifier = #{identifier,jdbcType=VARCHAR})</if>
      </if>
    </trim>) AS matches
    LEFT JOIN institution i ON i.key = matches.institution_key
    LEFT JOIN address addr ON addr.key = matches.address_key
    LEFT JOIN address mailing_addr ON mailing_addr.key = matches.mailing_address_key
  </select>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO collection_tag(collection_key,tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{tagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN collection_tag ON tag_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING collection_tag
    WHERE
    tag_key = tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  <!-- END TAGS -->

  <!-- IDENTIFIERS -->
  <insert id="addCollectionIdentifier">
    INSERT INTO collection_identifier(collection_key,identifier_key,is_primary)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{identifierKey,jdbcType=INTEGER},
    #{isPrimary,jdbcType=BOOLEAN}
    )
  </insert>

  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.COLLECTION_IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN collection_identifier ON identifier_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING collection_identifier
    WHERE
    identifier_key = identifier.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <!-- we don't want to return deleted collections in the identifier resolver -->
  <select id="findByIdentifier" resultType="java.util.UUID">
    SELECT c.key
    FROM collection c
    INNER JOIN collection_identifier ci ON ci.collection_key = c.key
    INNER JOIN identifier i ON i."key" = ci.identifier_key
    WHERE regexp_replace(i.identifier, 'http://', '') = regexp_replace(#{identifier,jdbcType=VARCHAR}, 'http://', '')
      AND c.deleted IS NULL;
  </select>

  <!-- Update existing primary identifier to false -->
  <update id="setAllIdentifiersToNonPrimary">
    UPDATE collection_identifier
    SET is_primary = false
    WHERE collection_key = #{targetEntityKey, jdbcType=OTHER}
  </update>

  <!-- Update identifier is_primary -->
  <update id="updateIdentifier">
    UPDATE collection_identifier
    SET is_primary = #{primary,jdbcType=BOOLEAN}
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=OTHER}
  </update>

  <select id="areRelated" resultType="boolean">
    SELECT EXISTS (
    SELECT 1
    FROM collection_identifier
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    AND identifier_key = #{identifierKey,jdbcType=INTEGER}
    )
  </select>
  <!-- END IDENTIFIERS -->

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO collection_machine_tag(collection_key,machine_tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN collection_machine_tag ON machine_tag_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING collection_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING collection_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="COLLECTION_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (c.key) <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    INNER JOIN collection_machine_tag cm ON cm.collection_key = c.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY c.key, c.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT c.key)
    FROM collection c
    INNER JOIN collection_machine_tag cm ON cm.collection_key = c.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>
  <!-- END MACHINE TAGS -->

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.collections.KeyCodeNameResult">
    <if test="q != null and !q.isEmpty()">
      SELECT key, code, name
      FROM (
      SELECT key, code, name,
      to_tsvector('english', code || ' ' || name) AS document,
      to_tsquery('english', unaccent(regexp_replace(#{q} || ':*', ' ', '&amp;', 'g'))) AS query
      FROM collection
      WHERE deleted IS NULL
      ) AS subquery
      WHERE document @@ query
      ORDER BY ts_rank(document, query) DESC
      LIMIT 20;
    </if>
    <if test="q == null or q.isEmpty()">
      SELECT key, code, name FROM collection
      WHERE deleted IS NULL
      LIMIT 20;
    </if>
  </select>

  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO collection_comment(collection_key,comment_key)
    VALUES(
      #{targetEntityKey,jdbcType=OTHER},
      #{commentKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listComments" resultType="org.gbif.api.model.registry.Comment">
    SELECT <include refid="org.gbif.registry.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment
    INNER JOIN collection_comment ON comment_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of comment to trigger cascade delete of the join table -->
  <delete id="deleteComment">
    DELETE FROM comment USING collection_comment
    WHERE
    comment_key = comment.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>
  <!-- END COMMENTS -->

  <!-- OCCURRENCE MAPPINGS -->
  <insert id="addOccurrenceMapping">
    INSERT INTO collection_occurrence_mapping(collection_key, occurrence_mapping_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{occurrenceMappingKey,jdbcType=INTEGER}
    )
  </insert>

  <update id="deleteOccurrenceMapping">
    DELETE FROM occurrence_mapping USING collection_occurrence_mapping
    WHERE
    occurrence_mapping_key = occurrence_mapping.key
    AND collection_key = #{targetEntityKey,jdbcType=OTHER}
    AND occurrence_mapping_key = #{occurrenceMappingKey,jdbcType=INTEGER}
  </update>

  <select id="listOccurrenceMappings" resultType="org.gbif.api.model.collections.OccurrenceMapping">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.OccurrenceMappingMapper.OCCURRENCE_MAPPING_FIELDS"/>
    FROM occurrence_mapping
    INNER JOIN collection_occurrence_mapping  iom ON iom.occurrence_mapping_key = key
    WHERE iom.collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>
  <!-- END EXPLICIT MAPPINGS -->

  <!-- MERGE -->
  <update id="replace">
    UPDATE collection
    SET deleted = now(),
    replaced_by = #{replacementKey,jdbcType=OTHER},
    modified_by = #{user,jdbcType=VARCHAR}
    WHERE key = #{targetEntityKey,jdbcType=OTHER} AND deleted IS NULL
  </update>
  <!-- END MERGE -->

  <!-- MASTER SOURCE -->
  <insert id="addMasterSourceMetadata">
    UPDATE collection
    SET master_sync_metadata_key = #{metadataKey,jdbcType=INTEGER},
        master_source = #{masterSourceType,jdbcType=OTHER}
    WHERE key = #{targetEntityKey,jdbcType=OTHER}
  </insert>

  <update id="removeMasterSourceMetadata">
    UPDATE collection
    SET master_sync_metadata_key = null,
        master_source = 'GRSCICOLL'
    WHERE key = #{targetEntityKey,jdbcType=OTHER}
  </update>

  <select id="getMasterSourceMetadata" resultType="org.gbif.api.model.collections.MasterSourceMetadata">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.MasterSourceSyncMetadataMapper.METADATA_READ_FIELDS"/>
    FROM master_sync_metadata m
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <select id="getEntityMasterSourceMetadata" resultType="org.gbif.api.model.collections.MasterSourceMetadata">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.MasterSourceSyncMetadataMapper.METADATA_READ_FIELDS"/>
    FROM master_sync_metadata m
    INNER JOIN collection c ON c.master_sync_metadata_key = m.key
    WHERE c.key = #{targetEntityKey,jdbcType=OTHER}
  </select>

  <select id="findByMasterSource" resultMap="COLLECTION_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    INNER JOIN master_sync_metadata m ON c.master_sync_metadata_key = m.key
    WHERE m.source = #{source,jdbcType=OTHER} AND m.source_id = #{sourceId,jdbcType=VARCHAR}
  </select>

  <select id="findByDatasetOrganizationAsMasterSource" resultMap="MASTER_SOURCE_ORG_DTO_MAP">
    SELECT c.key collectionKey, d.key datasetKey
    FROM dataset d
    INNER JOIN organization o ON o.key = d.publishing_organization_key
    INNER JOIN master_sync_metadata msm ON msm.source_id = cast(d.key as text)
    INNER JOIN collection c ON c.master_sync_metadata_key = msm.key
    WHERE o.key = #{organizationKey,jdbcType=OTHER} AND c.deleted IS NULL
  </select>
  <!-- END MASTER SOURCE -->

</mapper>
