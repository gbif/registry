<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.DescriptorsMapper">

  <resultMap id="DESCRIPTOR_GROUP_MAP" type="DescriptorGroup" autoMapping="true">
    <id property="key" column="key"/>
    <result property="tags" column="tags" typeHandler="org.gbif.registry.persistence.mapper.handler.SetArrayTypeHandler"/>
  </resultMap>

  <sql id="DESCRIPTOR_GROUP_WRITE_FIELDS">
    title, description, collection_key, created, created_by, modified, modified_by, tags
  </sql>

  <sql id="DESCRIPTOR_GROUP_READ_FIELDS">
    ds.key, ds.title, ds.description, ds.collection_key, ds.created, ds.created_by, ds.modified, ds.modified_by,
    ds.deleted, ds.tags
  </sql>

  <sql id="DESCRIPTOR_GROUP_PARAMS_CREATE">
    #{title,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{collectionKey,jdbcType=OTHER},
    now(), <!-- created -->
    #{createdBy,jdbcType=VARCHAR},
    now(), <!-- modified -->
    #{modifiedBy,jdbcType=VARCHAR},
    <choose>
      <when test="tags != null and tags.size() > 0">
        #{tags,jdbcType=ARRAY,typeHandler=org.gbif.registry.persistence.mapper.handler.SetArrayTypeHandler}
      </when>
      <otherwise>
        '{}'::text[]
      </otherwise>
    </choose>
  </sql>

  <sql id="DESCRIPTOR_GROUP_PARAMS_UPDATE">
    title = #{title,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    tags = <choose>
      <when test="tags != null and tags.size() > 0">
        #{tags,jdbcType=ARRAY,typeHandler=org.gbif.registry.persistence.mapper.handler.SetArrayTypeHandler}
      </when>
      <otherwise>
        '{}'::text[]
      </otherwise>
    </choose>,
    deleted = null <!-- if we're updating it can't be deleted -->
    <!-- disallowed to update the collection key -->
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{params.query}))),'\s+',':* &amp; ','g')||':*')
  </sql>

  <insert id="createDescriptorGroup" parameterType="DescriptorGroup" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO collection_descriptor_group(<include refid="DESCRIPTOR_GROUP_WRITE_FIELDS"/>)
    VALUES(<include refid="DESCRIPTOR_GROUP_PARAMS_CREATE"/>)
  </insert>

  <update id="updateDescriptorGroup" parameterType="DescriptorGroup">
    UPDATE collection_descriptor_group
    SET
    <include refid="DESCRIPTOR_GROUP_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <update id="moveDescriptorGroupForCollectionMerge" parameterType="DescriptorGroup">
    UPDATE collection_descriptor_group
    SET
    modified = now(),
    collection_key = #{collectionKey,jdbcType=OTHER}
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <update id="deleteDescriptorGroup">
    UPDATE collection_descriptor_group
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <select id="getDescriptorGroup" resultMap="DESCRIPTOR_GROUP_MAP">
    SELECT
    <include refid="DESCRIPTOR_GROUP_READ_FIELDS"/>
    FROM collection_descriptor_group ds
    WHERE ds.key = #{key,jdbcType=OTHER}
  </select>

  <select id="listDescriptorGroups" resultType="DescriptorGroup" resultMap="DESCRIPTOR_GROUP_MAP" parameterType="Pageable">
    SELECT DISTINCT ON(
    <if test="params.query != null">ts_rank_cd(ds.fulltext_search, query),</if>
    ds.created, ds.key)
    <include refid="DESCRIPTOR_GROUP_READ_FIELDS"/>, ds.fulltext_search
    <include refid="LIST_DESCRIPTOR_GROUPS_FILTER"/>
    ORDER BY <if test="params.query != null">ts_rank_cd(ds.fulltext_search, query) DESC,</if>ds.created DESC, ds.key
    <if test="params.page != null">
      LIMIT #{params.page.limit} OFFSET #{params.page.offset}
    </if>
  </select>

  <select id="countDescriptorGroups" resultType="Long">
    SELECT COUNT(DISTINCT ds.key)
    <include refid="LIST_DESCRIPTOR_GROUPS_FILTER"/>
  </select>

  <sql id="LIST_DESCRIPTOR_GROUPS_FILTER">
    FROM collection_descriptor_group ds
    <if test="params.query != null">
      <include refid="FULLTEXT_SEARCH"/> AS query ON query @@ ds.fulltext_search
    </if>
    <where>
      <choose>
        <when test="params.deleted != null and params.deleted">
          ds.deleted IS NOT NULL
        </when>
        <otherwise>
          ds.deleted IS NULL
        </otherwise>
      </choose>
      <if test="params.collectionKey != null">
        AND ds.collection_key = #{params.collectionKey,jdbcType=OTHER}
      </if>
      <if test="params.title != null">
        AND lower(ds.title) = lower(#{params.title,jdbcType=VARCHAR})
      </if>
      <if test="params.description != null">
        AND lower(ds.description) = lower(#{params.description,jdbcType=VARCHAR})
      </if>
      <if test="params.tags != null and !params.tags.isEmpty()">
        AND ds.tags &amp;&amp; ARRAY[
          <foreach item="tag" collection="params.tags" separator=",">
            #{tag}::text
          </foreach>
        ]::text[]
      </if>
    </where>
  </sql>

  <!-- record queries -->
  <resultMap id="DESCRIPTOR_DTO_MAP" type="DescriptorDto" autoMapping="true">
    <id property="key" column="key"/>
    <result property="descriptorKey" column="collection_descriptor_key"/>
    <result property="descriptorGroupKey" column="collection_descriptor_group_key"/>
    <result property="identifiedBy" column="identified_by" typeHandler="StringArrayTypeHandler"/>
    <result property="typeStatus" column="type_status" typeHandler="StringArrayTypeHandler"/>
    <result property="recordedBy" column="recorded_by" typeHandler="StringArrayTypeHandler"/>
    <result property="issues" column="issues" typeHandler="StringArrayTypeHandler"/>
    <result property="taxonClassification" column="taxon_classification" typeHandler="RankedNameListTypeHandler"/>
    <collection property="verbatim" column="key" select="listVerbatims"/>
  </resultMap>

  <sql id="DESCRIPTOR_WRITE_FIELDS">
    collection_descriptor_group_key, usage_key, usage_name, usage_rank, taxon_classification, taxon_keys, country,
    individual_count, identified_by, date_identified, type_status, recorded_by, discipline, object_classification_name,
    biome, biome_type, issues, kingdom_key, kingdom_name, phylum_key, phylum_name, class_key, class_name, order_key, order_name, family_key,
    family_name, genus_key, genus_name, species_key, species_name
  </sql>

  <sql id="DESCRIPTOR_READ_FIELDS">
    d.key, d.collection_descriptor_group_key, d.usage_key, d.usage_name, d.usage_rank, d.taxon_classification, d.country,
    d.individual_count, d.identified_by, d.date_identified, d.type_status, d.recorded_by, d.discipline,
    d.object_classification_name, d.biome, d.biome_type, d.issues, d.kingdom_key, d.kingdom_name, d.phylum_key, d.phylum_name,
    d.class_key, d.class_name, d.order_key, d.order_name, d.family_key, d.family_name, d.genus_key, d.genus_name,
    d.species_key, d.species_name
  </sql>

  <sql id="DESCRIPTOR_PARAMS_CREATE">
    #{descriptorGroupKey,jdbcType=INTEGER},
    #{usageKey,jdbcType=VARCHAR},
    #{usageName,jdbcType=VARCHAR},
    #{usageRank,jdbcType=VARCHAR},
    #{taxonClassification,jdbcType=OTHER,typeHandler=RankedNameListTypeHandler}::jsonb,
    #{taxonKeys,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{country,jdbcType=VARCHAR},
    #{individualCount,jdbcType=INTEGER},
    #{identifiedBy,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{dateIdentified,jdbcType=OTHER},
    #{typeStatus,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{recordedBy,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{discipline,jdbcType=VARCHAR},
    #{objectClassificationName,jdbcType=VARCHAR},
    #{biome,jdbcType=VARCHAR},
    #{biomeType,jdbcType=VARCHAR},
    #{issues,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{kingdomKey,jdbcType=VARCHAR},
    #{kingdomName,jdbcType=VARCHAR},
    #{phylumKey,jdbcType=VARCHAR},
    #{phylumName,jdbcType=VARCHAR},
    #{classKey,jdbcType=VARCHAR},
    #{className,jdbcType=VARCHAR},
    #{orderKey,jdbcType=VARCHAR},
    #{orderName,jdbcType=VARCHAR},
    #{familyKey,jdbcType=VARCHAR},
    #{familyName,jdbcType=VARCHAR},
    #{genusKey,jdbcType=VARCHAR},
    #{genusName,jdbcType=VARCHAR},
    #{speciesKey,jdbcType=VARCHAR},
    #{speciesName,jdbcType=VARCHAR}
  </sql>

  <sql id="DESCRIPTOR_PARAMS_UPDATE">
    usage_key = #{usageKey,jdbcType=VARCHAR},
    usage_name = #{usageName,jdbcType=VARCHAR},
    usage_rank = #{usageRank,jdbcType=VARCHAR},
    taxon_classification = #{taxonClassification,jdbcType=OTHER,typeHandler=RankedNameListTypeHandler}::jsonb,
    taxon_keys = #{taxonKeys,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    country = #{country,jdbcType=VARCHAR},
    individual_count = #{individualCount,jdbcType=INTEGER},
    identified_by = #{identifiedBy,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    date_identified = #{dateIdentified,jdbcType=OTHER},
    type_status = #{typeStatus,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    recorded_by = #{recordedBy,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    discipline = #{discipline,jdbcType=VARCHAR},
    object_classification_name = #{objectClassificationName,jdbcType=VARCHAR},
    biome = #{biome,jdbcType=VARCHAR},
    biome_type = #{biomeType,jdbcType=VARCHAR},
    issues = #{issues,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    kingdom_key = #{kingdomKey,jdbcType=VARCHAR},
    kingdom_name = #{kingdomName,jdbcType=VARCHAR},
    phylum_key =  #{phylumKey,jdbcType=VARCHAR},
    phylum_name = #{phylumName,jdbcType=VARCHAR},
    class_key =  #{classKey,jdbcType=VARCHAR},
    class_name = #{className,jdbcType=VARCHAR},
    order_key =  #{orderKey,jdbcType=VARCHAR},
    order_name = #{orderName,jdbcType=VARCHAR},
    family_key = #{familyKey,jdbcType=VARCHAR},
    family_name = #{familyName,jdbcType=VARCHAR},
    genus_key = #{genusKey,jdbcType=VARCHAR},
    genus_name = #{genusName,jdbcType=VARCHAR},
    species_key = #{speciesKey,jdbcType=VARCHAR},
    species_name = #{speciesName,jdbcType=VARCHAR}
  </sql>

  <insert id="createDescriptor" parameterType="DescriptorDto" useGeneratedKeys="true" keyProperty="key">
    INSERT INTO collection_descriptor(<include refid="DESCRIPTOR_WRITE_FIELDS"/>)
    VALUES(<include refid="DESCRIPTOR_PARAMS_CREATE"/>)
  </insert>

  <delete id="deleteDescriptors">
    DELETE FROM collection_descriptor
    WHERE collection_descriptor_group_key = #{descriptorGroupKey,jdbcType=INTEGER}
  </delete>

  <update id="updateDescriptor" parameterType="DescriptorDto">
    UPDATE collection_descriptor
    SET <include refid="DESCRIPTOR_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <select id="getDescriptor" resultMap="DESCRIPTOR_DTO_MAP">
    SELECT
    <include refid="DESCRIPTOR_READ_FIELDS"/>
    FROM collection_descriptor d
    WHERE d.key = #{key,jdbcType=OTHER}
  </select>

  <select id="listDescriptors" resultType="DescriptorDto" resultMap="DESCRIPTOR_DTO_MAP" parameterType="Pageable">
    SELECT DISTINCT ON(
    <if test="params.query != null">ts_rank_cd(d.fulltext_search, query),</if>
    d.key)
    <include refid="DESCRIPTOR_READ_FIELDS"/>, d.fulltext_search
    <include refid="LIST_DESCRIPTORS_FILTER"/>
    ORDER BY <if test="params.query != null">ts_rank_cd(d.fulltext_search, query) DESC,</if> d.key
    <if test="params.page != null">
      LIMIT #{params.page.limit} OFFSET #{params.page.offset}
    </if>
  </select>

  <select id="countDescriptors" resultType="Long">
    SELECT COUNT(DISTINCT d.key)
    <include refid="LIST_DESCRIPTORS_FILTER"/>
  </select>

  <select id="listDescriptorsWithVocabularyField" resultType="DescriptorDto" resultMap="DESCRIPTOR_DTO_MAP">
    SELECT <include refid="DESCRIPTOR_READ_FIELDS"/>
    FROM collection_descriptor d
    INNER JOIN collection_descriptor_group ds ON ds.key = d.collection_descriptor_group_key AND ds.deleted IS NULL
    INNER JOIN collection_descriptor_verbatim v ON v.collection_descriptor_key = d.key
    <where>
      AND v.field_name = #{fieldName}
      AND v.field_value IS NOT NULL
      AND v.field_value != ''
    </where>
    ORDER BY d.key
  </select>

  <sql id="LIST_DESCRIPTORS_FILTER">
    FROM collection_descriptor d
    INNER JOIN collection_descriptor_group ds ON ds.key = d.collection_descriptor_group_key AND ds.deleted IS NULL
    <if test="params.query != null">
      <include refid="FULLTEXT_SEARCH"/> AS query ON query @@ d.fulltext_search
    </if>
    <where>
      <if test="params.descriptorGroupKey != null">
        AND d.collection_descriptor_group_key = #{params.descriptorGroupKey,jdbcType=OTHER}
      </if>
      <if test="params.usageKey != null and params.usageKey.size > 0">
        AND d.usage_key IN
        <foreach item="item" collection="params.usageKey" open="(" separator="," close=")">
          #{item,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="params.usageName != null and params.usageName.size > 0">
        AND d.usage_name IN
        <foreach item="item" collection="params.usageName" open="(" separator="," close=")">
          #{item,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="params.usageRank != null and params.usageRank.size > 0">
        AND d.usage_rank IN
        <foreach item="item" collection="params.usageRank" open="(" separator="," close=")">
          #{item,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="params.taxonKey != null and params.taxonKey.size > 0">
        AND d.taxon_keys &amp;&amp; ARRAY
        <foreach item="item" collection="params.taxonKey" open="[" separator="," close="]">
          #{item,jdbcType=VARCHAR}
        </foreach>
      </if>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_RANGE_FIELD_FILTER">
        <property name="values" value="params.individualCount"/>
        <property name="field" value="d.individual_count"/>
      </include>
      <include refid="org.gbif.registry.persistence.mapper.collections.Common.MULTIVALUE_RANGE_FIELD_FILTER">
        <property name="values" value="params.dateIdentified"/>
        <property name="field" value="d.date_identified"/>
      </include>
      <if test="params.identifiedBy != null and params.identifiedBy.size > 0">
        AND d.identified_by &amp;&amp; ARRAY
        <foreach item="item" collection="params.identifiedBy" open="[" separator="," close="]">
          #{item,jdbcType=VARCHAR}::text
        </foreach>
      </if>
      <if test="params.typeStatus != null and params.typeStatus.size > 0">
        AND d.type_status &amp;&amp; ARRAY
        <foreach item="item" collection="params.typeStatus" open="[" separator="," close="]">
          #{item,jdbcType=VARCHAR}::text
        </foreach>
      </if>
      <if test="params.recordedBy != null and params.recordedBy.size > 0">
        AND d.recorded_by &amp;&amp; ARRAY
        <foreach item="item" collection="params.recordedBy" open="[" separator="," close="]">
          #{item,jdbcType=VARCHAR}::text
        </foreach>
      </if>
      <if test="params.discipline != null and params.discipline.size > 0">
        AND d.discipline IN
        <foreach item="item" collection="params.discipline" open="(" separator="," close=")">
          #{item,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="params.objectClassification != null and params.objectClassification.size > 0">
      AND d.object_classification_name IN
      <foreach item="item" collection="params.objectClassification" open="(" separator="," close=")">
        #{item,jdbcType=VARCHAR}
      </foreach>
    </if>
    <if test="params.biome != null and params.biome.size > 0">
      AND d.biome IN
      <foreach item="item" collection="params.biome" open="(" separator="," close=")">
        #{item,jdbcType=VARCHAR}
      </foreach>
    </if>
    <if test="params.biomeType != null and params.biomeType.size > 0">
      AND d.biome_type IN
      <foreach item="item" collection="params.biomeType" open="(" separator="," close=")">
        #{item,jdbcType=VARCHAR}
      </foreach>
    </if>
    <if test="params.country != null and params.country.size > 0">
      AND d.country IN
      <foreach item="item" collection="params.country" open="(" separator="," close=")">
        #{item,jdbcType=VARCHAR}
      </foreach>
    </if>
      <if test="params.issues != null and params.issues.size > 0">
        AND d.issues &amp;&amp; ARRAY
        <foreach item="item" collection="params.issues" open="[" separator="," close="]">
          #{item,jdbcType=VARCHAR}::text
        </foreach>
      </if>
    </where>
  </sql>

  <!-- verbatim fields queries -->
  <resultMap id="VERBATIM_DTO_MAP" type="VerbatimDto" autoMapping="true">
    <id property="key" column="key"/>
  </resultMap>

  <sql id="VERBATIM_WRITE_FIELDS">
    collection_descriptor_key, field_name, field_value
  </sql>

  <sql id="VERBATIM_READ_FIELDS">
    v.key, v.collection_descriptor_key, v.field_name, v.field_value
  </sql>

  <sql id="VERBATIM_PARAMS_CREATE">
    #{descriptorKey,jdbcType=INTEGER},
    #{fieldName,jdbcType=VARCHAR},
    #{fieldValue,jdbcType=VARCHAR}
  </sql>

  <insert id="createVerbatim" useGeneratedKeys="true">
    INSERT INTO collection_descriptor_verbatim(<include refid="VERBATIM_WRITE_FIELDS"/>)
    VALUES(<include refid="VERBATIM_PARAMS_CREATE"/>)
  </insert>

  <select id="listVerbatims" resultType="VerbatimDto" resultMap="VERBATIM_DTO_MAP">
    SELECT
    <include refid="VERBATIM_READ_FIELDS"/>
    FROM collection_descriptor_verbatim v
    WHERE v.collection_descriptor_key = #{descriptorKey,jdbcType=INTEGER}
    ORDER BY v.key ASC
  </select>

  <select id="getVerbatimNames" resultType="VerbatimDto" resultMap="VERBATIM_DTO_MAP">
      SELECT <include refid="VERBATIM_READ_FIELDS"/>
      FROM collection_descriptor_verbatim v
      INNER JOIN collection_descriptor cd ON cd.key = v.collection_descriptor_key
      WHERE cd.collection_descriptor_group_key = #{descriptorGroupKey,jdbcType=INTEGER}
  </select>

  <select id="getVerbatimValues" resultType="VerbatimDto" resultMap="VERBATIM_DTO_MAP">
      SELECT <include refid="VERBATIM_READ_FIELDS"/>
      FROM collection_descriptor_verbatim v
      WHERE v.collection_descriptor_key = #{descriptorKey,jdbcType=INTEGER}
      ORDER BY v.key ASC
  </select>

</mapper>
