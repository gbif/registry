<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.DatasetMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="DATASET_MAP" type="org.gbif.api.model.registry.Dataset" autoMapping="true">
    <id property="key" column="key"/>
    <association property="citation" resultMap="CITATION_MAP"/>
    <association property="numConstituents" column="key" select="countConstituents" />
    <collection property="contacts" column="key" select="listContacts"/>
    <collection property="endpoints" column="key" select="listEndpoints"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="comments" column="key" select="listComments"/>
  </resultMap>

  <!-- maps a citation object  -->
  <resultMap id="CITATION_MAP" type="org.gbif.api.model.registry.Citation" autoMapping="false">
    <result property="text" column="citation" />
    <result property="identifier" column="citation_identifier" />
  </resultMap>

  <sql id="WRITABLE_DATASET_FIELDS">
    key,parent_dataset_key,duplicate_of_dataset_key,installation_key,publishing_organization_key,
    external,type,sub_type,title,alias,abbreviation,description,language,
    homepage,logo_url,citation,citation_identifier,rights,locked_for_auto_update,created,created_by,
    modified,modified_by,doi,license,maintenance_update_frequency,version
  </sql>

  <sql id="DATASET_FIELDS">
    d.key,d.parent_dataset_key,d.duplicate_of_dataset_key,d.installation_key,d.publishing_organization_key,
    d.external,d.type,d.sub_type,d.title,d.alias,d.abbreviation,d.description,d.language,
    d.homepage,d.logo_url,
    COALESCE(d.citation, o.title || ': ' || d.title) as citation,
    d.citation_identifier,d.rights,d.locked_for_auto_update,d.created,d.created_by,
    d.modified,d.modified_by,d.deleted,d.doi,d.license,d.maintenance_update_frequency,d.version
  </sql>

  <!--
    Simple fulltext search on the search field or contact search field.
    to_tsquery() is used to handle ALL stuff from the URL so the limitations are constrained by this method.
    Uses the default configuration english for the English language.
   -->
  <sql id="SIMPLE_SEARCH">
    query  @@ d.fulltext_search
      OR EXISTS(
        SELECT contact_key
        FROM dataset_contact JOIN contact c ON c.key = contact_key
        WHERE dataset_key=d.key AND query @@ c.fulltext_search
      )
  </sql>

  <!--
    key, created and deleted are never changed
   -->
  <sql id="DATASET_UPDATE">
    parent_dataset_key = #{parentDatasetKey,jdbcType=OTHER},
    duplicate_of_dataset_key = #{duplicateOfDatasetKey,jdbcType=OTHER},
    installation_key = #{installationKey,jdbcType=OTHER},
    publishing_organization_key = #{publishingOrganizationKey,jdbcType=OTHER},
    external = #{external,jdbcType=BOOLEAN},
    type = #{type,jdbcType=OTHER},
    sub_type = #{subtype,jdbcType=OTHER},
    title = #{title,jdbcType=VARCHAR},
    alias = #{alias,jdbcType=VARCHAR},
    abbreviation = #{abbreviation,jdbcType=CHAR},
    description = #{description,jdbcType=VARCHAR},
    language = #{language,jdbcType=CHAR},
    homepage = #{homepage,jdbcType=VARCHAR},
    logo_url = #{logoUrl,jdbcType=VARCHAR},
    citation = #{citation.text,jdbcType=VARCHAR},
    citation_identifier = #{citation.identifier,jdbcType=VARCHAR},
    rights = #{rights,jdbcType=VARCHAR},
    locked_for_auto_update = #{lockedForAutoUpdate,jdbcType=BOOLEAN},
    modified = now(),
    modified_by = #{modifiedBy},
    deleted = null, <!-- if we're updating it can't be deleted -->
    doi = #{doi,jdbcType=VARCHAR},
    license = #{license,jdbcType=OTHER},
    maintenance_update_frequency = #{maintenanceUpdateFrequency,jdbcType=OTHER},
    version = #{version}
  </sql>

  <sql id="WRITABLE_DATASET_FIELD_TYPES">
    #{key,jdbcType=OTHER},
    #{parentDatasetKey,jdbcType=OTHER},
    #{duplicateOfDatasetKey,jdbcType=OTHER},
    #{installationKey,jdbcType=OTHER},
    #{publishingOrganizationKey,jdbcType=OTHER},
    #{external,jdbcType=BOOLEAN},
    #{type,jdbcType=OTHER},
    #{subtype,jdbcType=OTHER},
    #{title,jdbcType=VARCHAR},
    #{alias,jdbcType=VARCHAR},
    #{abbreviation,jdbcType=CHAR},
    #{description,jdbcType=VARCHAR},
    #{language,jdbcType=CHAR},
    #{homepage,jdbcType=VARCHAR},
    #{logoUrl,jdbcType=VARCHAR},
    #{citation.text,jdbcType=VARCHAR},
    #{citation.identifier,jdbcType=VARCHAR},
    #{rights,jdbcType=VARCHAR},
    #{lockedForAutoUpdate,jdbcType=BOOLEAN},
    now(), <!-- created -->
    #{createdBy},
    now(), <!-- modified -->
    #{createdBy},
    #{doi,jdbcType=VARCHAR},
    #{license,jdbcType=OTHER},
    #{maintenanceUpdateFrequency,jdbcType=OTHER},
    #{version}
  </sql>

  <select id="countConstituents" resultType="int">
    SELECT COUNT(*) AS num_constituents FROM dataset WHERE deleted IS NULL AND parent_dataset_key = #{key}
  </select>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="DATASET_MAP">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.key = #{key,jdbcType=OTHER}
  </select>

  <!--  Note: you can get entities which are deleted -->
  <select id="listByDOI" resultMap="DATASET_MAP">
    SELECT DISTINCT ON (d.key) <include refid="DATASET_FIELDS"/>
    FROM dataset d
    LEFT JOIN organization o ON o.key = d.publishing_organization_key
    LEFT JOIN dataset_identifier ON dataset_key = d.key
    LEFT JOIN identifier i ON identifier_key = i.key AND i.type = 'DOI'
    WHERE lower(d.doi) = lower(#{doi}) OR lower(i.identifier) = lower(#{doi})
    ORDER BY d.key, d.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>


  <select id="countByDOI" resultType="Long">
    SELECT count(DISTINCT d.key)
    FROM dataset d
           LEFT JOIN organization o ON o.key = d.publishing_organization_key
           LEFT JOIN dataset_identifier ON dataset_key = d.key
           LEFT JOIN identifier i ON identifier_key = i.key AND i.type = 'DOI'
    WHERE lower(d.doi) = lower(#{doi}) OR lower(i.identifier) = lower(#{doi})
  </select>

  <select id="title" resultType="String">
    SELECT title
    FROM dataset
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <insert id="create" parameterType="org.gbif.api.model.registry.Dataset">
    INSERT INTO dataset(<include refid="WRITABLE_DATASET_FIELDS"/>)
    VALUES(<include refid="WRITABLE_DATASET_FIELD_TYPES"/>)
  </insert>

  <update id="update" parameterType="org.gbif.api.model.registry.Dataset">
    UPDATE dataset
    SET <include refid="DATASET_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE dataset
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--
    Append safe ordering, omitting deleted entities
    Sort order includes key, since created is not a unique sort order, so not robust
  -->
  <select id="list" resultType="org.gbif.api.model.registry.Dataset"  resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <!-- Basic paging search functionality -->
  <select id="search" resultMap="DATASET_MAP">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query ON <include refid="SIMPLE_SEARCH"/>
    </if>
    LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.deleted IS NULL
    ORDER BY <if test="query != null" >ts_rank_cd(d.fulltext_search, query) DESC, </if>d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Integer" parameterType="map">
    SELECT COUNT(*)
    FROM dataset d
    <if test="query != null" >
      JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query ON <include refid="SIMPLE_SEARCH"/>
    </if>
    WHERE deleted IS NULL
  </select>

  <select id="countWithFilter" resultType="Integer">
    SELECT COUNT(*)
    FROM dataset d
    <if test="country != null" >
      INNER JOIN organization o ON d.publishing_organization_key = o.key
    </if>
    WHERE d.deleted IS NULL
    <if test="type != null" >
      AND d.type = #{type,jdbcType=OTHER}
    </if>
    <if test="country != null" >
      AND o.country = #{country,jdbcType=OTHER}
    </if>
  </select>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO dataset_tag(dataset_key,tag_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{tagKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listTags" resultType="org.gbif.api.model.registry.Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN dataset_tag ON tag_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING dataset_tag
    WHERE
      tag_key = tag.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>

  <!-- CONTACTS -->
  <insert id="addContact">
    INSERT INTO dataset_contact(dataset_key,contact_key, type, is_primary)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{contactKey,jdbcType=INTEGER},
            #{type,jdbcType=OTHER},
            #{isPrimary,jdbcType=BOOLEAN}
          )
  </insert>

  <select id="areRelated" resultType="boolean">
    SELECT true
    FROM dataset_contact
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
      AND contact_key = #{contactKey,jdbcType=INTEGER}
    LIMIT 1
  </select>

  <!-- Update existing primary contacts of a type to false -->
  <update id="updatePrimaryContacts">
    UPDATE dataset_contact
    SET is_primary=false
    WHERE dataset_key=#{targetEntityKey,jdbcType=OTHER} AND type=#{type,jdbcType=OTHER}
  </update>

  <!-- Update contact type and is_primary -->
  <update id="updateContact">
    UPDATE dataset_contact
    SET is_primary=#{primary,jdbcType=BOOLEAN},
        type=#{type,jdbcType=OTHER}
    WHERE dataset_key=#{targetEntityKey,jdbcType=OTHER} AND contact_key=#{contactKey,jdbcType=INTEGER}
  </update>

  <!-- List of contacts returned in ascending created date, preserving same order in which they were persisted -->
  <select id="listContacts" resultMap="org.gbif.registry.persistence.mapper.ContactMapper.CONTACT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.ContactMapper.CONTACT_FIELDS"/>
    FROM contact INNER JOIN dataset_contact ON contact_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <!-- Joined delete of contact to trigger cascade delete of the join table -->
  <delete id="deleteContact">
    DELETE FROM contact USING dataset_contact
    WHERE
      contact_key = contact.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND contact_key = #{contactKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteContacts">
    DELETE FROM contact USING dataset_contact
    WHERE
      contact_key = contact.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER}
  </delete>

  <!-- ENDPOINTS -->
  <insert id="addEndpoint">
    INSERT INTO dataset_endpoint(dataset_key,endpoint_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{endpointKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listEndpoints" resultMap="org.gbif.registry.persistence.mapper.EndpointMapper.ENDPOINT_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.EndpointMapper.ENDPOINT_FIELDS"/>
    FROM endpoint INNER JOIN dataset_endpoint ON endpoint_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of endpoint to trigger cascade delete of the join table -->
  <delete id="deleteEndpoint">
    DELETE FROM endpoint USING dataset_endpoint
    WHERE
      endpoint_key = endpoint.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND endpoint_key = #{endpointKey,jdbcType=INTEGER}
  </delete>

  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO dataset_identifier(dataset_key,identifier_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{identifierKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listIdentifiers" resultType="org.gbif.api.model.registry.Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN dataset_identifier ON identifier_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING dataset_identifier
    WHERE
      identifier_key = identifier.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO dataset_machine_tag(dataset_key,machine_tag_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{machineTagKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listMachineTags" resultType="org.gbif.api.model.registry.MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN dataset_machine_tag ON machine_tag_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING dataset_machine_tag
    WHERE
      machine_tag_key = machine_tag.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING dataset_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    dataset_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT DISTINCT ON (d.key) <include refid="DATASET_FIELDS"/>
    FROM dataset d
    INNER JOIN dataset_machine_tag dm ON dm.dataset_key = d.key
    INNER JOIN machine_tag m ON dm.machine_tag_key = m.key
    LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY d.key, d.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT d.key)
    FROM dataset d
    INNER JOIN dataset_machine_tag dm ON dm.dataset_key = d.key
    INNER JOIN machine_tag m ON dm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>

  <!-- COMMENTS -->
  <insert id="addComment">
    INSERT INTO dataset_comment(dataset_key,comment_key)
    VALUES(
            #{targetEntityKey,jdbcType=OTHER},
            #{commentKey,jdbcType=INTEGER}
          )
  </insert>

  <select id="listComments" resultType="org.gbif.api.model.registry.Comment">
    SELECT <include refid="org.gbif.registry.persistence.mapper.CommentMapper.COMMENT_FIELDS"/>
    FROM comment INNER JOIN dataset_comment ON comment_key = key
    WHERE dataset_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of comment to trigger cascade delete of the join table -->
  <delete id="deleteComment">
    DELETE FROM comment USING dataset_comment
    WHERE
      comment_key = comment.key AND
      dataset_key = #{targetEntityKey,jdbcType=OTHER} AND comment_key = #{commentKey,jdbcType=INTEGER}
  </delete>

  <select id="listDatasetsInNetwork" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d INNER JOIN dataset_network dn ON dn.dataset_key = d.key LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE dn.network_key = #{networkKey,jdbcType=OTHER} AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="listDatasetsPublishedBy" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d
    INNER JOIN organization o ON d.publishing_organization_key = o.key
    WHERE o.key = #{organizationKey,jdbcType=OTHER}
    AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="listDatasetsHostedBy" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    INNER JOIN installation i ON d.installation_key = i.key
    INNER JOIN organization host ON i.organization_key = host.key
    WHERE host.key = #{organizationKey,jdbcType=OTHER}
    AND d.deleted IS NULL AND d.publishing_organization_key != host.key
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="listDatasetsEndorsedBy" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d
    INNER JOIN organization o ON d.publishing_organization_key = o.key AND o.deleted IS NULL AND o.endorsement_approved=true
    WHERE o.endorsing_node_key = #{nodeKey,jdbcType=OTHER}
    AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="listDatasetsByInstallation" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.installation_key = #{installationKey,jdbcType=OTHER}
    AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <!--
   Append safe ordering, omitting deleted entities
   This implementation is exposed as 2 different method signatures but the Interface.
   It is why _parameter.containsKey(...) must be used in order to avoid "parameter not found" error.
  -->
  <select id="listWithFilter" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d
    INNER JOIN organization o ON d.publishing_organization_key = o.key
    <where>
      <if test="!_parameter.containsKey('includeDeleted') or !includeDeleted" > d.deleted IS NULL</if>
      <if test="country != null" > AND o.country = #{country}</if>
      <if test="type != null" > AND d.type = #{type,jdbcType=OTHER}</if>
      <if test="_parameter.containsKey('installationKey') and installationKey != null" > AND d.installation_key = #{installationKey}</if>
      <if test="_parameter.containsKey('dateFrom') and dateFrom != null" > AND d.modified &gt;= #{dateFrom}</if>
      <if test="_parameter.containsKey('dateTo') and dateTo != null" > AND d.modified &lt; #{dateTo}</if>
    </where>
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDatasetsEndorsedBy" resultType="Long">
    SELECT count(*)
    FROM dataset d
           INNER JOIN organization o ON d.publishing_organization_key = o.key AND o.deleted IS NULL AND o.endorsement_approved=true
    WHERE o.endorsing_node_key = #{nodeKey,jdbcType=OTHER}
      AND d.deleted IS NULL
  </select>

  <select id="countDatasetsHostedBy" resultType="Long">
    SELECT count(*)
    FROM dataset d
           INNER JOIN installation i ON d.installation_key = i.key AND i.deleted IS NULL
           INNER JOIN organization o ON i.organization_key = o.key AND o.deleted IS NULL AND o.endorsement_approved=true
    WHERE d.deleted IS NULL AND o.key = #{organizationKey,jdbcType=OTHER} AND d.publishing_organization_key!=o.key
  </select>

  <select id="countDatasetsPublishedBy" resultType="Long">
    SELECT count(*)
    FROM dataset d
           INNER JOIN organization o ON d.publishing_organization_key = o.key AND o.deleted IS NULL
    WHERE o.key = #{organizationKey,jdbcType=OTHER}
      AND d.deleted IS NULL
  </select>

  <select id="countDatasetsByInstallation" resultType="Long">
    SELECT count(*)
    FROM dataset d
           INNER JOIN installation i ON d.installation_key = i.key AND i.deleted IS NULL AND d.deleted IS NULL
    WHERE i.key = #{installationKey,jdbcType=OTHER}
  </select>

  <select id="listConstituents" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.parent_dataset_key = #{parentKey,jdbcType=OTHER}
    AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="deleted" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.deleted IS NOT NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM dataset
    WHERE deleted IS NOT NULL
  </select>

  <select id="duplicates" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.duplicate_of_dataset_key IS NOT NULL AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countDuplicates" resultType="Long">
    SELECT count(*)
    FROM dataset
    WHERE duplicate_of_dataset_key IS NOT NULL AND deleted IS NULL
  </select>

  <select id="subdatasets" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    WHERE d.parent_dataset_key IS NOT NULL AND d.deleted IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countSubdatasets" resultType="Long">
    SELECT count(*)
    FROM dataset
    WHERE parent_dataset_key IS NOT NULL AND deleted IS NULL
  </select>

  <select id="withNoEndpoint" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    LEFT JOIN dataset_endpoint de ON de.dataset_key=d.key
    WHERE de.dataset_key IS NULL AND d.deleted IS NULL AND d.external IS false AND d.parent_dataset_key IS NULL
    ORDER BY d.created DESC, d.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countWithNoEndpoint" resultType="Long">
    SELECT count(*)
    FROM dataset d
           LEFT JOIN dataset_endpoint de ON de.dataset_key=d.key
    WHERE de.dataset_key IS NULL AND d.deleted IS NULL AND d.external IS false AND d.parent_dataset_key IS NULL
  </select>

  <select id="listByIdentifier" resultMap="DATASET_MAP" parameterType="org.gbif.api.model.common.paging.Pageable">
    SELECT DISTINCT ON (d.key) <include refid="DATASET_FIELDS"/>
    FROM dataset d LEFT JOIN organization o ON o.key = d.publishing_organization_key
    INNER JOIN dataset_identifier ON dataset_key = d.key
    INNER JOIN identifier i ON identifier_key = i.key
    WHERE identifier = #{identifier,jdbcType=VARCHAR}
    <if test="type != null" >
      AND i.type=#{type,jdbcType=OTHER}
    </if>
    ORDER BY d.key, d.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>
  <select id="countByIdentifier" resultType="Long">
    SELECT count(DISTINCT d.key)
    FROM dataset d
    INNER JOIN dataset_identifier ON dataset_key = d.key
    INNER JOIN identifier i ON identifier_key = i.key
    WHERE identifier = #{identifier,jdbcType=VARCHAR}
    <if test="type != null" >
      AND i.type=#{type,jdbcType=OTHER}
    </if>
  </select>

  <select id="listDistinctCountries" parameterType="org.gbif.api.model.common.paging.Pageable" resultType="org.gbif.api.vocabulary.Country">
    SELECT DISTINCT country
    FROM organization o
    INNER JOIN dataset d ON d.publishing_organization_key = o.key
    WHERE d.deleted IS NULL AND country IS NOT NULL
    ORDER BY country
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <!-- Should probably include more fields -->
  <select id="listDistinctInstallations" parameterType="org.gbif.api.model.common.paging.Pageable" resultType="org.gbif.api.model.registry.Installation">
    SELECT DISTINCT i.key, i.title
    FROM installation i
    INNER JOIN dataset d ON d.installation_key = i.key
    WHERE d.deleted IS NULL
    ORDER BY i.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

</mapper>
