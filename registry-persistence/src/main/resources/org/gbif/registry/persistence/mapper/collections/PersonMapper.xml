<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.PersonMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="COLLECTION_PERSON_MAP" type="CollectionPerson" autoMapping="true">
    <id property="key" column="key"/>
    <association property="mailingAddress" column="mailing_address_key" select="listAddress" />
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
  </resultMap>

  <sql id="PERSON_WRITE_FIELDS">
    key, first_name, last_name, position, area_responsibility, research_pursuits, phone, fax, email,
    mailing_address_key, primary_institution_key, primary_collection_key, created_by, modified_by,
    created, modified
  </sql>

  <sql id="PERSON_READ_FIELDS">
    p.key, p.first_name, p.last_name, p.position, p.area_responsibility, p.research_pursuits, p.phone, p.fax, p.email,
    p.mailing_address_key, p.primary_institution_key, p.primary_collection_key, p.created_by, p.modified_by,
    p.created, p.modified, p.deleted
  </sql>

  <sql id="PERSON_PARAMS_CREATE">
    #{key,jdbcType=OTHER},
    #{firstName,jdbcType=VARCHAR},
    #{lastName,jdbcType=VARCHAR},
    #{position,jdbcType=VARCHAR},
    #{areaResponsibility,jdbcType=VARCHAR},
    #{researchPursuits,jdbcType=VARCHAR},
    #{phone,jdbcType=VARCHAR},
    #{fax,jdbcType=VARCHAR},
    #{email,jdbcType=VARCHAR},
    #{mailingAddress.key,jdbcType=INTEGER},
    #{primaryInstitutionKey,jdbcType=OTHER},
    #{primaryCollectionKey,jdbcType=OTHER},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now() <!-- modified -->
  </sql>

  <sql id="PERSON_PARAMS_UPDATE">
    first_name = #{firstName,jdbcType=VARCHAR},
    last_name = #{lastName,jdbcType=VARCHAR},
    position = #{position,jdbcType=VARCHAR},
    area_responsibility = #{areaResponsibility,jdbcType=VARCHAR},
    research_pursuits = #{researchPursuits,jdbcType=VARCHAR},
    phone = #{phone,jdbcType=VARCHAR},
    fax = #{fax,jdbcType=VARCHAR},
    email = #{email,jdbcType=VARCHAR},
    mailing_address_key = #{mailingAddress.key,jdbcType=INTEGER},
    primary_institution_key = #{primaryInstitutionKey,jdbcType=OTHER},
    primary_collection_key = #{primaryCollectionKey,jdbcType=OTHER},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    deleted = null <!-- if we're updating it can't be deleted -->
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query ON query @@ fulltext_search
  </sql>

  <insert id="create" parameterType="CollectionPerson">
    INSERT INTO collection_person(<include refid="PERSON_WRITE_FIELDS"/>)
    VALUES(<include refid="PERSON_PARAMS_CREATE"/>)
  </insert>

  <update id="update" parameterType="CollectionPerson">
    UPDATE collection_person
    SET <include refid="PERSON_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE collection_person
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="COLLECTION_PERSON_MAP">
    SELECT <include refid="PERSON_READ_FIELDS"/>
    FROM collection_person p
    WHERE p.key = #{key,jdbcType=OTHER}
  </select>

  <select id="listAddress" resultMap="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_READ_FIELDS"/>
    FROM address
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <select id="list" resultType="CollectionPerson" resultMap="COLLECTION_PERSON_MAP" parameterType="Pageable">
    SELECT <include refid="PERSON_READ_FIELDS"/>
    FROM collection_person p
    <if test="query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    WHERE p.deleted IS NULL
    <if test="institutionKey != null" >
      AND p.primary_institution_key = #{institutionKey,jdbcType=OTHER}
    </if>
    <if test="collectionKey != null" >
      AND p.primary_collection_key = #{collectionKey,jdbcType=OTHER}
    </if>
    ORDER BY <if test="query != null" >ts_rank_cd(p.fulltext_search, query) DESC, </if>p.created DESC, p.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(*)
    FROM collection_person p
    <if test="query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    WHERE p.deleted IS NULL
    <if test="institutionKey != null" >
      AND p.primary_institution_key = #{institutionKey,jdbcType=OTHER}
    </if>
    <if test="collectionKey != null" >
      AND p.primary_collection_key = #{collectionKey,jdbcType=OTHER}
    </if>
  </select>

  <select id="deleted" resultType="CollectionPerson"  resultMap="COLLECTION_PERSON_MAP" parameterType="Pageable">
    SELECT <include refid="PERSON_READ_FIELDS"/>
    FROM collection_person p
    WHERE p.deleted IS NOT NULL
    ORDER BY p.created DESC, p.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM collection_person
    WHERE deleted IS NOT NULL
  </select>

  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO collection_person_identifier(collection_person_key,identifier_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{identifierKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN collection_person_identifier ON identifier_key = key
    WHERE collection_person_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING collection_person_identifier
    WHERE
    identifier_key = identifier.key AND
    collection_person_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <select id="findByIdentifier" resultType="java.util.UUID">
    SELECT cpi.collection_person_key
    FROM collection_person_identifier cpi
    INNER JOIN identifier i ON i."key" = cpi.identifier_key
    WHERE regexp_replace(i.identifier, 'http://', '') = regexp_replace(#{identifier,jdbcType=VARCHAR}, 'http://', '');
  </select>
  <!-- END IDENTIFIERS -->

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO collection_person_tag(collection_person_key,tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{tagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN collection_person_tag ON tag_key = key
    WHERE collection_person_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING collection_person_tag
    WHERE
    tag_key = tag.key AND
    collection_person_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  <!-- END TAGS -->

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO collection_person_machine_tag(collection_person_key,machine_tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN collection_person_machine_tag ON machine_tag_key = key
    WHERE collection_person_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING collection_person_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_person_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING collection_person_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_person_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="COLLECTION_PERSON_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (p.key) <include refid="PERSON_READ_FIELDS"/>
    FROM collection_person p
    INNER JOIN collection_person_machine_tag cm ON cm.collection_person_key = p.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY p.key, p.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT p.key)
    FROM collection_person p
    INNER JOIN collection_person_machine_tag cm ON cm.collection_person_key = p.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>
  <!-- END MACHINE TAGS -->

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.collections.PersonSuggestResult">
    SELECT key,first_name,last_name,email FROM (
    (SELECT key,first_name,last_name,email
    FROM collection_person
    WHERE unaccent(COALESCE(first_name, ''))||' '||unaccent(COALESCE(last_name, '')) ilike unaccent(#{q})||'%' ORDER BY first_name,last_name LIMIT 20)
    UNION ALL
    (SELECT key,first_name,last_name,email
    FROM collection_person
    WHERE unaccent(COALESCE(last_name, '')) ilike unaccent(#{q})||'%' ORDER BY last_name LIMIT 20)
    UNION ALL
    (SELECT key,first_name,last_name,email
    FROM collection_person
    WHERE unaccent(COALESCE(first_name, ''))||' '||unaccent(COALESCE(last_name, '')) ilike '%'||unaccent(#{q})||'%'
    AND NOT unaccent(COALESCE(first_name, ''))||' '||unaccent(COALESCE(last_name, '')) ilike unaccent(#{q})||'%'
    AND NOT unaccent(COALESCE(last_name, '')) ilike unaccent(#{q})||'%'
    ORDER BY first_name,last_name LIMIT 20)
    ) t1 LIMIT 20
  </select>

</mapper>
