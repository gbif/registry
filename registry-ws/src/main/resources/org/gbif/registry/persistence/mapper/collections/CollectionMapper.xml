<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.collections.CollectionMapper">

  <!-- Auto-mapping and eager loading of sub resources  -->
  <resultMap id="COLLECTION_MAP" type="SciCollection" autoMapping="true">
    <id property="key" column="key"/>
    <result property="email" column="email" typeHandler="StringArrayTypeHandler"/>
    <result property="phone" column="phone" typeHandler="StringArrayTypeHandler"/>
    <result property="contentTypes" column="content_type" typeHandler="CollectionContentTypeArrayTypeHandler"/>
    <result property="preservationTypes" column="preservation_type" typeHandler="PreservationTypeArrayTypeHandler"/>
    <association property="address" column="address_key" select="listAddress" />
    <association property="mailingAddress" column="mailing_address_key" select="listAddress" />
    <collection property="contacts" column="key" select="listContacts"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="identifiers" column="key" select="listIdentifiers"/>
    <collection property="machineTags" column="key" select="listMachineTags"/>
  </resultMap>

  <sql id="COLLECTION_WRITE_FIELDS">
    key, code, name, description, content_type, active, personal_collection, doi, email, phone, homepage, catalog_url, api_url,
    preservation_type, accession_status, institution_key, mailing_address_key, address_key,
    created_by, modified_by, created, modified, index_herbariorum_record, number_specimens
  </sql>

  <sql id="COLLECTION_READ_FIELDS">
    c.key, c.code, c.name, c.description, c.content_type, c.active, c.personal_collection, c.doi, c.email, c.phone, c.homepage,
    c.catalog_url, c.api_url, c.preservation_type, c.accession_status, c.institution_key, c.mailing_address_key,
    c.address_key, c.created_by, c.modified_by, c.created, c.modified, c.deleted, c.index_herbariorum_record, c.number_specimens
  </sql>

  <sql id="COLLECTION_PARAMS_CREATE">
    #{key,jdbcType=OTHER},
    #{code,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{contentTypes,jdbcType=ARRAY,typeHandler=CollectionContentTypeArrayTypeHandler},
    #{active,jdbcType=BOOLEAN},
    #{personalCollection,jdbcType=BOOLEAN},
    #{doi,jdbcType=VARCHAR},
    #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    #{homepage,jdbcType=VARCHAR},
    #{catalogUrl,jdbcType=VARCHAR},
    #{apiUrl,jdbcType=VARCHAR},
    #{preservationTypes,jdbcType=ARRAY,typeHandler=PreservationTypeArrayTypeHandler},
    #{accessionStatus,jdbcType=OTHER},
    #{institutionKey,jdbcType=OTHER},
    #{mailingAddress.key,jdbcType=INTEGER},
    #{address.key,jdbcType=INTEGER},
    #{createdBy,jdbcType=VARCHAR},
    #{modifiedBy,jdbcType=VARCHAR},
    now(), <!-- created -->
    now(), <!-- modified -->
    #{indexHerbariorumRecord,jdbcType=BOOLEAN},
    #{numberSpecimens,jdbcType=INTEGER}
  </sql>

  <sql id="COLLECTION_PARAMS_UPDATE">
    code = #{code,jdbcType=VARCHAR},
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    content_type = #{contentTypes,jdbcType=ARRAY,typeHandler=CollectionContentTypeArrayTypeHandler},
    active = #{active,jdbcType=BOOLEAN},
    personal_collection = #{personalCollection,jdbcType=BOOLEAN},
    doi = #{doi,jdbcType=VARCHAR},
    email = #{email,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    phone = #{phone,jdbcType=ARRAY,typeHandler=StringArrayTypeHandler},
    homepage = #{homepage,jdbcType=VARCHAR},
    catalog_url = #{catalogUrl,jdbcType=VARCHAR},
    api_url = #{apiUrl,jdbcType=VARCHAR},
    preservation_type = #{preservationTypes,jdbcType=ARRAY,typeHandler=PreservationTypeArrayTypeHandler},
    accession_status = #{accessionStatus,jdbcType=OTHER},
    institution_key = #{institutionKey,jdbcType=OTHER},
    mailing_address_key = #{mailingAddress.key,jdbcType=INTEGER},
    address_key = #{address.key,jdbcType=INTEGER},
    modified_by = #{modifiedBy,jdbcType=VARCHAR},
    modified = now(), <!-- modified -->
    deleted = null, <!-- if we're updating it can't be deleted -->
    index_herbariorum_record = #{indexHerbariorumRecord,jdbcType=BOOLEAN},
    number_specimens = #{numberSpecimens,jdbcType=INTEGER}
  </sql>

  <sql id="FULLTEXT_SEARCH">
    JOIN to_tsquery('english',regexp_replace(quote_literal(unaccent(trim(#{query}))),'\s+',':*&amp;','g')||':*') AS query ON query @@ fulltext_search
  </sql>

  <insert id="create" parameterType="SciCollection">
    INSERT INTO collection(<include refid="COLLECTION_WRITE_FIELDS"/>)
    VALUES(<include refid="COLLECTION_PARAMS_CREATE"/>)
  </insert>

  <update id="update" parameterType="SciCollection">
    UPDATE collection
    SET <include refid="COLLECTION_PARAMS_UPDATE"/>
    WHERE key = #{key,jdbcType=OTHER}
  </update>

  <!-- For safety, should it be already deleted nothing is done -->
  <update id="delete">
    UPDATE collection
    SET deleted = now()
    WHERE key = #{key,jdbcType=OTHER} AND deleted IS NULL
  </update>

  <!--  Note: you can get entities which are deleted -->
  <select id="get" resultMap="COLLECTION_MAP">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    WHERE c.key = #{key,jdbcType=OTHER}
  </select>

  <select id="listAddress" resultMap="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.AddressMapper.ADDRESS_READ_FIELDS"/>
    FROM address
    WHERE key = #{key,jdbcType=OTHER}
  </select>

  <!-- Basic paging search functionality -->
  <select id="list" resultType="SciCollection"  resultMap="COLLECTION_MAP" parameterType="Pageable">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    <if test="query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <if test="contactKey != null" >
      INNER JOIN collection_collection_person ccp on ccp.collection_key = c.key
    </if>
    WHERE c.deleted IS NULL
    <if test="institutionKey != null" >
      AND c.institution_key = #{institutionKey,jdbcType=OTHER}
    </if>
    <if test="contactKey != null" >
      AND ccp.collection_person_key = #{contactKey,jdbcType=OTHER}
    </if>
    <if test="code != null" >
      AND c.code = #{code,jdbcType=VARCHAR}
    </if>
    <if test="name != null" >
      AND c.name = #{name,jdbcType=VARCHAR}
    </if>
    ORDER BY <if test="query != null" >ts_rank_cd(c.fulltext_search, query) DESC, </if>c.created DESC, c.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long">
    SELECT COUNT(*)
    FROM collection c
    <if test="query != null" >
      <include refid="FULLTEXT_SEARCH"/>
    </if>
    <if test="contactKey != null" >
      INNER JOIN collection_collection_person ccp on ccp.collection_key = c.key
    </if>
    WHERE c.deleted IS NULL
    <if test="institutionKey != null" >
      AND c.institution_key = #{institutionKey,jdbcType=OTHER}
    </if>
    <if test="code != null" >
      AND c.code = #{code,jdbcType=VARCHAR}
    </if>
    <if test="name != null" >
      AND c.name = #{name,jdbcType=VARCHAR}
    </if>
    <if test="contactKey != null" >
      AND ccp.collection_person_key = #{contactKey,jdbcType=OTHER}
    </if>
  </select>

  <select id="deleted" resultType="SciCollection"  resultMap="COLLECTION_MAP" parameterType="Pageable">
    SELECT <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    WHERE c.deleted IS NOT NULL
    ORDER BY c.created DESC, c.key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countDeleted" resultType="Long">
    SELECT count(*)
    FROM collection
    WHERE deleted IS NOT NULL
  </select>

  <select id="listContacts" resultMap="org.gbif.registry.persistence.mapper.collections.PersonMapper.COLLECTION_PERSON_MAP">
    SELECT <include refid="org.gbif.registry.persistence.mapper.collections.PersonMapper.PERSON_READ_FIELDS"/>
    FROM collection_person p INNER JOIN collection_collection_person ON collection_person_key = p.key
    WHERE collection_key = #{key,jdbcType=OTHER}
    ORDER BY created ASC
  </select>

  <insert id="addContact">
    INSERT INTO collection_collection_person(collection_key,collection_person_key)
    VALUES(
    #{entityKey,jdbcType=OTHER},
    #{personKey,jdbcType=OTHER}
    )
  </insert>

  <delete id="removeContact">
    DELETE FROM collection_collection_person
    WHERE
    collection_key = #{entityKey,jdbcType=OTHER} AND collection_person_key = #{personKey,jdbcType=INTEGER}
  </delete>

  <!-- TAGS -->
  <insert id="addTag">
    INSERT INTO collection_tag(collection_key,tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{tagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listTags" resultType="Tag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.TagMapper.TAG_FIELDS"/>
    FROM tag INNER JOIN collection_tag ON tag_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of tag to trigger cascade delete of the join table -->
  <delete id="deleteTag">
    DELETE FROM tag USING collection_tag
    WHERE
    tag_key = tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND tag_key = #{tagKey,jdbcType=INTEGER}
  </delete>
  <!-- END TAGS -->

  <!-- IDENTIFIERS -->
  <insert id="addIdentifier">
    INSERT INTO collection_identifier(collection_key,identifier_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{identifierKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listIdentifiers" resultType="Identifier">
    SELECT <include refid="org.gbif.registry.persistence.mapper.IdentifierMapper.IDENTIFIER_FIELDS"/>
    FROM identifier INNER JOIN collection_identifier ON identifier_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY created DESC
  </select>

  <!-- Joined delete of identifier to trigger cascade delete of the join table -->
  <delete id="deleteIdentifier">
    DELETE FROM identifier USING collection_identifier
    WHERE
    identifier_key = identifier.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND identifier_key = #{identifierKey,jdbcType=INTEGER}
  </delete>

  <select id="findByIdentifier" resultType="java.util.UUID">
    SELECT ci.collection_key
    FROM collection_identifier ci
    INNER JOIN identifier i ON i."key" = ci.identifier_key
    WHERE regexp_replace(i.identifier, 'http://', '') = regexp_replace(#{identifier,jdbcType=VARCHAR}, 'http://', '');
  </select>
  <!-- END IDENTIFIERS -->

  <!-- MACHINE TAGS -->
  <insert id="addMachineTag">
    INSERT INTO collection_machine_tag(collection_key,machine_tag_key)
    VALUES(
    #{targetEntityKey,jdbcType=OTHER},
    #{machineTagKey,jdbcType=INTEGER}
    )
  </insert>

  <select id="listMachineTags" resultType="MachineTag">
    SELECT <include refid="org.gbif.registry.persistence.mapper.MachineTagMapper.MACHINETAG_FIELDS"/>
    FROM machine_tag INNER JOIN collection_machine_tag ON machine_tag_key = key
    WHERE collection_key = #{targetEntityKey,jdbcType=OTHER}
    ORDER BY namespace
  </select>

  <!-- Joined delete of machine_tag to trigger cascade delete of the join table -->
  <delete id="deleteMachineTag">
    DELETE FROM machine_tag USING collection_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND machine_tag_key = #{machineTagKey,jdbcType=INTEGER}
  </delete>

  <delete id="deleteMachineTags">
    DELETE FROM machine_tag USING collection_machine_tag
    WHERE
    machine_tag_key = machine_tag.key AND
    collection_key = #{targetEntityKey,jdbcType=OTHER} AND
    namespace = #{namespace}
    <if test="name != null" >
      AND name = #{name}
    </if>
  </delete>

  <select id="listByMachineTag" resultMap="COLLECTION_MAP" parameterType="Pageable">
    SELECT DISTINCT ON (c.key) <include refid="COLLECTION_READ_FIELDS"/>
    FROM collection c
    INNER JOIN collection_machine_tag cm ON cm.collection_key = c.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
    ORDER BY c.key, c.created DESC
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByMachineTag" resultType="Long">
    SELECT count(DISTINCT c.key)
    FROM collection c
    INNER JOIN collection_machine_tag cm ON cm.collection_key = c.key
    INNER JOIN machine_tag m ON cm.machine_tag_key = m.key
    WHERE m.namespace = #{namespace,jdbcType=VARCHAR}
    <if test="name != null" >
      AND m.name=#{name,jdbcType=VARCHAR}
      <if test="value != null" >
        AND m.value=#{value,jdbcType=VARCHAR}
      </if>
    </if>
  </select>
  <!-- END MACHINE TAGS -->

  <!-- Simple suggest -->
  <select id="suggest" resultType="org.gbif.api.model.registry.search.collections.KeyCodeNameResult">
    SELECT key,code,name FROM (
    (SELECT key,code,name FROM collection WHERE code ilike #{q}||'%' ORDER BY code LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM collection WHERE name ilike #{q}||'%' ORDER BY name LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM collection WHERE code ilike '%'||#{q}||'%' AND NOT code ilike #{q}||'%' ORDER BY code LIMIT 20)
    UNION ALL
    (SELECT key,code,name FROM collection WHERE name ilike '%'||#{q}||'%' AND NOT name ilike #{q}||'%' ORDER BY name LIMIT 20)
    ) t1 LIMIT 20
  </select>

</mapper>
