<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.registry.persistence.mapper.OccurrenceDownloadMapper">

  <!-- Maps a occurrence download  and handles the different types of downloads-->
  <resultMap id="OCCURRENCE_DOWNLOAD_MAP" type="org.gbif.api.model.occurrence.Download" autoMapping="false">
    <id property="key" column="key"/>
    <result property="doi" column="doi" />
    <result property="license" column="license"/>
    <result property="status" column="status"/>
    <result property="downloadLink" column="download_link"/>
    <result property="size" column="size"/>
    <result property="totalRecords" column="total_records"/>
    <result property="created" column="created"/>
    <result property="modified" column="modified"/>
    <result property="eraseAfter" column="erase_after"/>

    <association property="request" javaType="org.gbif.api.model.occurrence.DownloadRequest">
      <result property="notificationAddressesAsString" column="notification_addresses"/>
      <result property="sendNotification" column="send_notification"/>
      <result property="creator" column="created_by" />
      <result property="format" column="format"/>
      <discriminator javaType="string" column="format">
        <case value="SQL" resultType="org.gbif.api.model.occurrence.SqlDownloadRequest">
          <result property="sql" column="filter" />
        </case>
        <case value="DWCA" resultType="org.gbif.api.model.occurrence.PredicateDownloadRequest">
          <result property="predicate" column="filter" typeHandler="org.gbif.registry.persistence.mapper.handler.PredicateTypeHandler" />
        </case>
        <case value="SIMPLE_CSV" resultType="org.gbif.api.model.occurrence.PredicateDownloadRequest">
          <result property="predicate" column="filter" typeHandler="org.gbif.registry.persistence.mapper.handler.PredicateTypeHandler" />
        </case>
        <case value="SIMPLE_AVRO" resultType="org.gbif.api.model.occurrence.PredicateDownloadRequest">
          <result property="predicate" column="filter" typeHandler="org.gbif.registry.persistence.mapper.handler.PredicateTypeHandler" />
        </case>
        <case value="SPECIES_LIST" resultType="org.gbif.api.model.occurrence.PredicateDownloadRequest">
          <result property="predicate" column="filter" typeHandler="org.gbif.registry.persistence.mapper.handler.PredicateTypeHandler" />
        </case>
      </discriminator>
    </association>

    <association property="numberDatasets" column="key" select="COUNT_DATASETS" fetchType="eager"/>
  </resultMap>

  <resultMap id="DOWNLOADS_STATISTICS_COUNT_MAP" type="org.gbif.api.model.common.search.Facet$Count" autoMapping="true">
    <result property="name" column="year_month" />
    <result property="count" column="number_downloads" />
  </resultMap>

  <resultMap id="DOWNLOADS_STATISTICS_TOTAL_RECORDS_MAP" type="org.gbif.api.model.common.search.Facet$Count" autoMapping="true">
    <result property="name" column="year_month" />
    <result property="count" column="total_records" />
  </resultMap>

  <sql id="OCCURRENCE_DOWNLOAD_FIELDS">
    key,doi,license,filter,status,download_link,size,total_records,notification_addresses,created_by,send_notification,format,created,modified,erase_after
  </sql>


  <select id="COUNT_DATASETS" resultType="Integer">
    SELECT COUNT(*) FROM dataset_occurrence_download WHERE download_key = #{key,jdbcType=VARCHAR}
  </select>

  <!--
    Only the status,size,doi and total_records can be updated
   -->
  <sql id="OCCURRENCE_DOWNLOAD_UPDATE_STATUS">
    status = #{status,jdbcType=OTHER},
    size = #{size,jdbcType=BIGINT},
    doi = #{doi,jdbcType=VARCHAR},
    total_records = #{totalRecords,jdbcType=INTEGER},
    license = #{license,jdbcType=OTHER},
    erase_after = #{eraseAfter,jdbcType=TIMESTAMP},
    modified = now()
  </sql>

  <sql id="OCCURRENCE_DOWNLOAD_FIELD_TYPES">
    #{key,jdbcType=VARCHAR},
    #{doi,jdbcType=VARCHAR},
    #{license,jdbcType=OTHER},
    <choose>
      <when test="request.format.name().equals('SQL')"> #{request.sql,jdbcType=VARCHAR},</when>
      <otherwise>#{request.predicate,jdbcType=VARCHAR,typeHandler=org.gbif.registry.persistence.mapper.handler.PredicateTypeHandler},</otherwise>
    </choose>
    #{status,jdbcType=OTHER},
    #{downloadLink,jdbcType=VARCHAR},
    #{size,jdbcType=BIGINT},
    #{totalRecords,jdbcType=INTEGER},
    #{request.notificationAddressesAsString,jdbcType=VARCHAR},
    #{request.creator,jdbcType=VARCHAR},
    #{request.sendNotification,jdbcType=BOOLEAN},
    #{request.format,jdbcType=OTHER},
    now(), <!-- created -->
    now(), <!-- modified -->
    #{eraseAfter,jdbcType=TIMESTAMP}
  </sql>

  <select id="get" resultType="org.gbif.api.model.occurrence.Download" resultMap="OCCURRENCE_DOWNLOAD_MAP">
    SELECT <include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>
    FROM occurrence_download
    WHERE key = #{key,jdbcType=VARCHAR}
  </select>

  <select id="getByDOI" resultType="org.gbif.api.model.occurrence.Download" resultMap="OCCURRENCE_DOWNLOAD_MAP">
    SELECT <include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>
    FROM occurrence_download
    WHERE doi = #{doi,jdbcType=VARCHAR}
  </select>


  <insert id="create" parameterType="org.gbif.api.model.occurrence.Download">
    INSERT INTO occurrence_download(<include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>)
    VALUES(<include refid="OCCURRENCE_DOWNLOAD_FIELD_TYPES"/>)
  </insert>

  <update id="update" parameterType="org.gbif.api.model.occurrence.Download">
    UPDATE occurrence_download
    SET <include refid="OCCURRENCE_DOWNLOAD_UPDATE_STATUS"/>
    WHERE key = #{key,jdbcType=VARCHAR}
  </update>

  <!-- Append safe ordering -->
  <select id="listByUser" resultType="org.gbif.api.model.occurrence.Download" resultMap="OCCURRENCE_DOWNLOAD_MAP">
    SELECT <include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>
    FROM occurrence_download
    WHERE created_by = #{creator,jdbcType=VARCHAR}
    <if test="status != null and !status.isEmpty()" >
      AND status IN
      <foreach item="item" index="index" collection="status"
               open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    ORDER BY created DESC, key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByUser" resultType="Integer">
    SELECT COUNT(*)
    FROM occurrence_download
    WHERE created_by = #{creator,jdbcType=VARCHAR}
    <if test="status != null and !status.isEmpty()" >
      AND status IN
      <foreach item="item" index="index" collection="status"
               open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>

  <!-- Append safe ordering -->
  <select id="list" resultType="org.gbif.api.model.occurrence.Download" resultMap="OCCURRENCE_DOWNLOAD_MAP">
    SELECT <include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>
    FROM occurrence_download
    ORDER BY created DESC, key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Integer">
    SELECT COUNT(*)
    FROM occurrence_download
  </select>

  <!-- Append safe ordering -->
  <select id="listByStatus" resultType="org.gbif.api.model.occurrence.Download" resultMap="OCCURRENCE_DOWNLOAD_MAP">
    SELECT <include refid="OCCURRENCE_DOWNLOAD_FIELDS"/>
    FROM occurrence_download
    WHERE status IN
    <foreach item="item" index="index" collection="status"
             open="(" separator="," close=")">
      #{item}
    </foreach>
    ORDER BY created DESC, key
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="countByStatus" resultType="Integer">
    SELECT COUNT(*)
    FROM occurrence_download
    WHERE status IN
    <foreach item="item" index="index" collection="status"
             open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <select id="getDownloadsByUserCountry" resultType="org.gbif.api.model.common.search.Facet$Count" resultMap="DOWNLOADS_STATISTICS_COUNT_MAP" parameterType="map">
    SELECT to_char(year_month AT TIME ZONE 'UTC','YYYY-MM') AS year_month, SUM(total_records) AS total_records, SUM(number_downloads) AS number_downloads
    FROM download_user_statistics
    <where>
      <if test="userCountry != null">AND user_country = #{userCountry,jdbcType=OTHER}</if>
      <if test="fromDate != null" ><![CDATA[AND year_month >= #{fromDate,jdbcType=TIMESTAMP}]]></if>
      <if test="toDate != null" ><![CDATA[AND year_month < #{toDate,jdbcType=TIMESTAMP}]]></if>
    </where>
    GROUP BY year_month
    ORDER BY year_month DESC;
  </select>

  <select id="getDownloadedRecordsByDataset" resultType="org.gbif.api.model.common.search.Facet$Count" resultMap="DOWNLOADS_STATISTICS_TOTAL_RECORDS_MAP" parameterType="map">
    SELECT to_char(year_month AT TIME ZONE 'UTC','YYYY-MM') AS year_month, SUM(total_records) AS total_records, SUM(number_downloads) AS number_downloads
    FROM download_statistics
    <where>
      <if test="publishingCountry != null">AND publishing_organization_country = #{publishingCountry,jdbcType=OTHER}</if>
      <if test="datasetKey != null">AND dataset_key = #{datasetKey,jdbcType=OTHER}</if>
      <if test="fromDate != null"><![CDATA[AND year_month >= #{fromDate,jdbcType=TIMESTAMP}]]></if>
      <if test="toDate != null"><![CDATA[AND year_month < #{toDate,jdbcType=TIMESTAMP}]]></if>
    </where>
    GROUP BY year_month
    ORDER BY year_month DESC;
  </select>
</mapper>
